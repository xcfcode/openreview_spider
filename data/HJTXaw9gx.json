{"paper": {"title": "Recursive Regression with Neural Networks: Approximating the HJI PDE Solution", "authors": ["Vicen\u00e7 Rubies Royo", "Claire Tomlin"], "authorids": ["vrubies@berkeley.edu", "tomlin@berkeley.edu"], "summary": "A neural network that learns an approximation to a function by generating its own regression points", "abstract": "Most machine learning applications using neural networks seek to approximate some function g(x) by minimizing some cost criterion. In the simplest case, if one has access to pairs of the form (x, y) where y = g(x), the problem can be framed as a regression problem. Beyond this family of problems, we find many cases where the unavailability of data pairs makes this approach unfeasible. However, similar to what we find in the reinforcement learning literature, if we have some known properties of the function we are seeking to approximate, there is still hope to frame the problem as a regression problem. In this context, we present an algorithm that approximates the solution to a partial differential equation known as the Hamilton-Jacobi-Isaacs PDE and compare it to current state of the art tools. This PDE, which is found in the fields of control theory and robotics, is of particular importance in safety critical systems where guarantees of performance are a must.", "keywords": ["Supervised Learning", "Games", "Theory"]}, "meta": {"decision": "Invite to Workshop Track", "comment": "The basic approach of this paper is to use a neural net to sequentially generate points that can be used as the basis points in a PDE solver. The idea is definitely an interesting one, and all three reviewers are in agreement that the approach does seem to have a lot of potential.\n \n The main drawback of the paper, simply, is that it's unclear whether this result would be of sufficient interest for the ICLR audience. Ultimately, it seems as though the authors are simply training a neural network to generate this points, and the interesting contribution here comes from the application to PDE solving, not really from any advance in the NN/ML side itself. As such, it seems like the paper would be better appreciated (as a full conference paper or journal paper), within the control community, rather than ICLR. However, I do think that as an application, many at ICLR would be interested in seeing this work, even if its likely to have relatively low impact on the community. Thus, I think the best avenue for this paper is probably as a workshop post at ICLR, hopefully with further submission and exposure in the controls community.\n \n Pros:\n + Nice application of ML to a fun problem, generating sample points for PDE solutions\n + Overall well-written and clearly presented\n \n Cons:\n - Unclear contribution to the actual ML side of things\n - Probably better suited to controls conferences"}, "review": {"SkKUW8IIg": {"type": "rebuttal", "replyto": "r1D5x7vNx", "comment": "Thank you very much for taking the time to review the paper and for the attached URLs, we look forward to reading their contents. \n\nAlso, we added an extra experiment in 3D at the end.", "title": "Addressing the Reviewer"}, "Hk47l8U8x": {"type": "rebuttal", "replyto": "HJTXaw9gx", "comment": "We appended a 3D experiment in the paper.", "title": "Extra Experiment Appended"}, "H1xLyUILe": {"type": "rebuttal", "replyto": "r1INGfVNl", "comment": "Thank you for taking the time to review our work.\n\n1.) We are aware that the PDE residual does not ultimately reflect how good an approximation is. One can have an approximation where the function has a \"discontinuous jump\" in an arbitrarily small time interval and the residual might remain small, even though the approximation is clearly not correct. This is in part why we did not use a single error metric, but used two error metrics instead. Also, since the PDE residual is still being used in some papers to get a \"feeling\" for the learning progression, we decided to use it as well.\n\n2.) We used a set of 2D examples to check whether the algorithm would work in the first place. If it does not work in 2D it probably won't work in 3D, 4D etc. This being said, we know that interesting problems are those in high dimensions, and that is what we are currently working towards. To that end, we appended an extra experiment in 3D at the end of the paper.\n\n3.) Finally, we believe that this work is in fact suited for this conference just like other submissions, particularly those in RL, which make use of NNs and solely focus on algorithmic performance and make no mention of learned representations/features. Moreover, the topic of safety is gaining more importance in the AI community, and thus it seems appropriate to present our work here.\n\n", "title": "Addressing the reviewer's questions II"}, "B1FqTuk4x": {"type": "rebuttal", "replyto": "rku9KeJ4x", "comment": "Thank you for the review. Below I will address the points mentioned by the reviewer.\n\n1.) & 3.)\nThis method indeed requires retraining if the domain bounds, the dynamics f(x)/f(x,a)/f(x,a,b) or the boundary condition change. However, to the best of our knowledge, this is also the case for all existing gridding/finite element techniques. This, I am afraid, seems unavoidable for most (if not all) PDE numerical methods.\n\nThis approach is meant to offer a different way to compute the approximation to the HJI PDE with some of the advantages mentioned in the \"Advantages and Disadvantages\" section, including curse of dimensionality alleviation for memory, differentiability of the approximation (finite/gridding methods yield the gradient approximation using the grid, which is itself an approximation) and approximation over the entire domain (not just grid points). Some very recent experiments with the algorithm also hint that the method may scale to state dimensions higher than 4, which is something promising given that gridding methods become intractable beyond state dimension of 4 (again, due to the curse of dimensionality). \n\nIn terms of a \"unifying approach\", one of the core ideas was to discretize the partial derivative for time in such a way that values would \"flow\" away from the boundary; in that context, we believe this could also work for other PDEs where the left hand-side of the PDE is the only place where the partial derivative with respect to time appears (this includes the diffusion PDE). That would essentially require changing lines 11 and 12 of the algorithm. Last but not least, in comparison to other neural network approaches to approximating PDE solutions, ours does not require the right-hand side to be differentiable.\n\n2.)\nThe set S \\in [-5,5]^2 was used for all experiments. This work has a lot of different parts that can be tweaked to push the algorithm to its limits, and changing the size of S is one of them; given the time and space constraints we have not yet been able to explore all of these limits, but we will certainly be exploring them in the near future. ", "title": "Addressing the reviewer's questions"}}}