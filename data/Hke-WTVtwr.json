{"paper": {"title": "Encoding word order in complex embeddings", "authors": ["Benyou Wang", "Donghao Zhao", "Christina Lioma", "Qiuchi Li", "Peng Zhang", "Jakob Grue Simonsen"], "authorids": ["wang@dei.unipd.it", "zhaodh@tju.edu.cn", "chrh@di.ku.dk", "qiuchili@dei.unipd.it", "pzhang@tju.edu.cn", "simonsen@di.ku.dk"], "summary": "", "abstract": "Sequential word order is important when processing text. Currently, neural networks (NNs) address this by modeling word position using position embeddings. The problem is that position embeddings capture the position of individual words, but not the ordered relationship (e.g., adjacency or precedence) between individual word positions. We present a novel and principled solution for modeling both the global absolute positions of words and their order relationships. Our solution generalizes word embeddings, previously defined as independent vectors, to continuous word functions over a variable (position). The benefit of continuous functions over variable positions is that word representations shift smoothly with increasing positions. Hence, word representations in different positions can correlate with each other in a continuous function. The general solution of these functions can be extended to complex-valued variants. We extend CNN, RNN and Transformer NNs to complex-valued versions to incorporate our complex embedding (we make all code available). Experiments on text classification, machine translation and language modeling show gains over both classical word embeddings and position-enriched word embeddings. To our knowledge, this is the first work in NLP to link imaginary numbers in complex-valued representations to concrete meanings (i.e., word order).", "keywords": ["word embedding", "complex-valued neural network", "position embedding"]}, "meta": {"decision": "Accept (Spotlight)", "comment": "This paper describes a new language model that captures both the position of words, and their order relationships.  This redefines word embeddings (previously thought of as fixed and independent vectors) to be functions of position.  This idea is implemented in several models (CNN, RNN and Transformer NNs) to show improvements on multiple tasks and datasets.\n\nOne reviewer asked for additional experiments, which the authors provided, and which still supported their methodology.   In the end, the reviewers agreed this paper should be accepted."}, "review": {"r1lxJDIcKB": {"type": "review", "replyto": "Hke-WTVtwr", "review": "### Summary\n\nThe authors present a \"natural\" way of encoding position information into word embeddings and present extensive empirical evidence to support their method. I believe that paper meets the bar for acceptance.\n\n### Details\n\nThe paper \"Encoding word order in complex embeddings\" presents a method for making word embeddings position dependent. The idea in a nutshell is to map each discrete position , n, to a value  `   A exp( freq_{word, dim} \u00d7 n )` . So a word embedding is a collection of complex valued signals sampled at discrete points.\n\nThe frequency is dependent on each word and each dimension in general. The authors motivate/justify this particular formulation via their Claim 1, which argues that their particular formulation uniquely satisfies two intuitive constraints. Although one of those constraints (i.e. linearly witnessed Position-free offset) almost completely specifies the solution.\n\nThe experiments in the paper are fairly thorough and cover text classification, machine translation and language modeling. Through the comparative experiments the complex embeddings we can see that the formulation in this paper outperforms existing SOTA methods, sometimes with significantly difference such as a difference of 1.3 BLEU point on the MT task. \n\nI would have liked to say that the ablation are similarly conclusive but there seem to be a problem in the table, which eroded my confidence:\n\n1. The number of parameters in rows 5 and 8  (w/t encoding positions, share / not-share respectively) are reported to be 9.38M and 8.33M which has to be wrong. Similar problem happens with other pairs. And now I am not sure whether the results were also swapped or not. Still the results in general trend in the right direction.\n\n### Possible improvements to the paper\n\n1. The main weakness of the paper is that the authors repeatedly mention that encoding the position as a multiplicative factor which is multiplied to the frequency gives leads to a more decoupled/interpretable embedding but their experiments are solely focused on accuracy measurement. I would have liked to see the authors carry out more experiments to see whether the frequency parameters really are interpretable? For example, \n      -  What is the histogram of the frequencies ? Are some of them negative? \n      - Which word has the highest frequencies (pooled over all dimensions) in absolute term? Does it make sense that that word's meaning is so position dependent? For example, positions can capture subjects versus objects in english, but they will more reliably reflect the subject versus verb distinction in hindi. \n      - Are the word frequencies by themselves predictive of anything? For example, what happens if the word embedding amplitudes are tied across words or dimensions? We expect the performance to be bad but how bad? \n\nThese kinds of ablations  / qualitative analysis will really make the paper more informative and interesting. Right now it just seems like yet another paper where the capacity of the model is increased and the accuracy increases. Specially because the delta improvement over the fixed positional embeddings of (Transformer-TPE Vaswani et al. 2017) is so limited.\n\n\n\n### Edit after the author response\n\nThe authors have made the required corrections and added the necessary analysis. One interesting outcome was that the \"word-sharing amplitude schema\" seems to drop so little in performance, it's almost like all the information can be coded in just the phase vectors alone. It will be nice if the authors release their trained phase embeddings as well, for the words. ", "title": "Official Blind Review #2", "rating": "6: Weak Accept", "confidence": 3}, "SygmcOJ0YS": {"type": "review", "replyto": "Hke-WTVtwr", "review": "This paper proposes to learn position varying embeddings of words using complex numbers. Specifically, this work learns a position embedding by learning a continuous function that respects relative position based constraints and is bounded. The authors show that complex representations are an ideal fit for this purpose wherein the amplitude of the complex wave represents the base word embedding that is positionally invariants and the \"wave\" part encodes encodes the evolution of each dimension with position  as a periodic function with a learnable phase and period. \n\nResults are shown on text classification baselines and improvements are small. In the experiments related to machine translation and language modeling, some relevant baselines are missing (which were covered in the text classification case) , most importantly, Vaswani etal 2017 variant of complex position embeddings and \"complex-vanilla\", and all the numbers for other baselines are reported from the corresponding papers, hence it is unclear whether the improvement shown is strictly comparable or not.\n\nMoreover, a question that is unanswered is how does the periodicity affect the quality of embeddings. Basically, because of the periodic nature, the dimensions will take the same value for multiple positions spaced out according to the period. Is this a good assumption? Now, with large periods, for a finite practical length value, the periodic effects might end up not being observed but is that the case in the models that this approach learns? It would be great if authors could characterize the contexts/ words for which the periods are small and the contexts for which they are large. Basically, my concern is about the effect of getting the same embedding as output for different positions which is very likely if most of the periods learnt are small. \n\nAlso, empirical results with some other functions (maybe unbounded, or non-linear functions that do not respect relative positional constraints) would be insightful in order to assess the need for the desiderata laid out for the position sensitive functions. Finally, the \"iff\" proof needs to be cleaned up because I am not still not convinced if the proof holds oin both the directions and I believe there could be other functions with desired properties.\n\nThere are minor typos in equations like last line of \"Property 1\" related to g_pos, x.\n", "title": "Official Blind Review #1", "rating": "8: Accept", "confidence": 3}, "S1e32fPEcS": {"type": "review", "replyto": "Hke-WTVtwr", "review": "\n### Problem and Previous Research\nThis paper tackles the problem of incorporating the sequential structure of words for text processing. \nPrevious research [Gehring et al., ICML'17; Vaswani et al., NeurIPS'17] tackles the problem by adding position embeddings at the feature level. \nSupported by recent empirical results [Shaw et al., NAACL'18; Dai et al., ACL'19], the paper argues that these position embeddings are independent i.e. do not consider relations between neighbouring word positions.\n\n### Contributions\nTo address this key limitation of previous research, the paper proposes to define the embedding of each word through a continuous function over its position (so that embeddings shift smoothly with increasing positions thereby modelling word order). \nThe paper then lists two properties that such a function needs to satisfy and proposes to use the complex space as the target domain of the function. \nExperimental results on text classification, machine translation, and language modelling show gains over classical and position-enriched word embeddings.\n\n### Pros and Cons\nOverall, the paper tackles an important problem in word embeddings and proposes a principled approach to the problem. \nHowever, the paper could be further strengthened by positioning itself with respect to other existing neural network-based approaches that incorporate sequential structure e.g. graph neural networks (GNNs).\nGated-graph neural networks (GGNN) [Beck et al., ACL'18] and graph convolutional networks [Sahu et al., ACL'19] use GNNs on graphs with words as nodes and labelled edges (adjacence, precedence, etc.) between nodes to model the sequential structure between words.\u00a0\n\n### Possible Improvements\nOn the empirical side, GGNN of Beck et al. seems esp. relevant since they show improvements on machine translation.\nA GNN-based baseline to compare against is to use Transformer - Complex - vanilla embeddings as features to a GGNN on the graph with words as nodes and adjacence, precedence labelled edges between neighbouring words.\n[Beck et al., ACL'18] Graph-to-Sequence Learning using Gated Graph Neural Networks\n[Sahu et al., ACL'19] Inter-sentence Relation Extraction with Document-level Graph Convolutional Neural Network\n\nI am open to revising my rating based on the responses of the authors.", "title": "Official Blind Review #4", "rating": "6: Weak Accept", "confidence": 2}, "Hkx-jjWooS": {"type": "rebuttal", "replyto": "r1lxJDIcKB", "comment": "Thank you for your review.\n\nThere was a typo in the ablation table (Table 4).  We have swapped the notations for whether sharing the W for QKV transformations (in the third column, the sharing notation (\u00d7) and non-sharing notation (\u221a)). \n\nThere are indeed some negative values for frequencies/periods. Thus we define the overall frequency as the mean of the absolute values, and draw a histogram of the overall frequencies (Fig. 3). The word frequencies could be an indicator of whether the word representation is sensitive to where (which position) the word appears; the higher frequency the word has, the more sensitive the word representation is to the position. We have added appendix D, where we show that the most frequent words typically express strong sentiment.\n\nWe added to the paper an ablation test (dimension-sharing amplitude and word-sharing amplitude schemas) where embedding amplitudes are tied across words or dimensions in Table 4 (and a brief discussion). \n\n\n", "title": "To Reviewer #2"}, "rylyLsbsjB": {"type": "rebuttal", "replyto": "SygmcOJ0YS", "comment": "Thank you for your review.\n\nWe have added experiments with one more baseline (complex Vanilla) in the revised paper (Table 5.1 and 5.2). The reason why we did not add the remaining 2 baselines to Table 5.1 and 5.2 is time limitations within this rebuttal period. Note however that prior work (Vaswani et al. 2017) states that trainable PE and TPE have nearly identical results (our experiments on text classification tasks also show the same trend). Thus we include only TPE in Table 5.1 and 5.2, which is the standard Transformer implementation \n\nRegarding whether the improvements are strictly comparable or not, we ran all baselines using code from SOTA publications [2,3] and changed the embedding as proposed in our paper without modifying the baselines in any other way. We have released our code: https://github.com/iclr-complex-order/complex-order .\n\nRegarding the third comment, we have now added an appendix D where we characterize the contexts for which the periods are small and the contexts for which they are large.\n\nWe agree that experimenting with functions that do not satisfy both of our desired properties would be interesting, and we intend to do so in future work.\n\nWe have reviewed and clarified the proof of the \u2018iff\u2019 condition.\n\nWe have fixed the typo in the last line of Property 1.\n", "title": "To Reviewer # 1"}, "SyxEj9-siS": {"type": "rebuttal", "replyto": "S1e32fPEcS", "comment": "Thank you for your comments.\nAs suggested by you, we have conducted an experiment on Graph Convolution Networks for text classification (a simple and general NLP task). The results are shown below. The implemented GCN has a two-layer architecture, where each layer encodes and updates all nodes in the graph using features of immediate neighbors based on a dependency tree [1,2]. The experimental results show overall inconsistent, sporadic, and negligible gains, as well as some notable drops in accuracy (trigonometric position embedding setting) on the position embedding setup (including the vanilla learnable position embedding, fixed trigonometric position embedding and the proposed embedding). \n\n|     setting                      |    MR |  SUBJ |    CR |  MPQA |  SST  |  TREC |\n+------------------------------+---------+---------+---------+---------+---------+--------+\n|GCN                                | 0.786 | 0.934 | 0.844 | 0.833 | 0.826 | 0.906 |\n|GCN-PE                          | 0.781 | 0.931 | 0.810 | 0.830 | 0.822 | 0.884 |\n|GCN-TPE                        | 0.548 | 0.928 | 0.656 | 0.828 | 0.818 | 0.886 |\n|GCN-Complex-vanilla | 0.762 | 0.918 | 0.831 | 0.824 | 0.805 | 0.886 |\n|GCN-Complex-order   | 0.781 | 0.931 | 0.825 | 0.833 | 0.816 | 0.900 |\n\nThe code used for this experiment is available here:  https://github.com/iclr-complex-order/cgcn .\n\nWe agree that GCNs offer a different approach to handle position sensitivity than our proposed method, and we agree that this should be properly reflected  in the paper; we have added a short explanation and  references to Section 3.1.\n\n\n[1] Marcheggiani, Diego, and Ivan Titov. \"Encoding Sentences with Graph Convolution Labeling.\" EMNLP. 2017.\n[2] Zhang, Yuhao, Peng Qi, and Christopher D. Manning. \"Graph Convolution over Pruned Dependency Trees Improves Relation Extraction.\" EMNLP. 2018.", "title": "To Reviewer #4"}, "Skg0qtWsiS": {"type": "rebuttal", "replyto": "B1x_HUU8cH", "comment": "Thank you for your comments. \nRegarding the fact that the offset does not have a positive effect, we agree with the reviewer and we have added a short discussion about this in the revised paper in Section 3.1. One of the reasons may be that phase is periodical and needs a better way to regularize the initial phase term.", "title": "To Reviewer #3"}, "B1x_HUU8cH": {"type": "review", "replyto": "Hke-WTVtwr", "review": "This paper makes present an original way to encode the position of the token when encoding them in a sequence. The classical additive encoding of positions creates several issues, such as the lack of flexibility when dealing with pooling layers, and the authors refer it as the position-independence problem. \n\nInstead, the proposed approach is based on the encoding of a term-specific frequency (through the complex argument) and modulus in the complex-space, applied once per embedding dimension. This enables the embedding of a word to be dependent on the position in a non-linear manner. The intuition is similar to the use of complex numbers in signal analysis.\n\nSorry this is not scientifically, but I have to mention that I find the axiomatic derivation of the approach simply beautiful. It is amazing to find such a simple formula from two obvious properties that someone would want from a positional encoding: Position-free offset transformation and boundedness to handle arbitrary length. \n\nThe fact that the offset does not have positive effect is interesting, and the discussion about it is limited. I would assume it is due to some redundancy in the other two parameters, but more experiences would be needed.\n\nThe rest of the paper shows impressive results, both for text-classification and for machine translation, with a clear comparison with the state-of-the-art. The gains are really significant, providing a clear validation of the approach.\n\nIn short, it is quite rare to find such a clear and simple idea with so much empirical gains. I would love to meet the authors once the review period is over.\n", "title": "Official Blind Review #3", "rating": "8: Accept", "confidence": 4}}}