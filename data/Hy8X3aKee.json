{"paper": {"title": "Deep Symbolic Representation Learning for Heterogeneous Time-series Classification", "authors": ["Shengdong Zhang", "Soheil Bahrampour", "Naveen Ramakrishnan", "Mohak Shah"], "authorids": ["zhangshengdongofgz@gmail.com", "Soheil.Bahrampour@us.bosch.com", "Naveen.Ramakrishnan@us.bosch.com", "mohak@mohakshah.com"], "summary": "", "abstract": "In this paper, we consider the problem of event classification with multi-variate time series data consisting of heterogeneous (continuous and categorical) variables. The complex temporal dependencies between the variables combined with sparsity of the data makes the event classification problem particularly challenging. Most state-of-art approaches address this either by designing hand-engineered features or breaking up the problem over homogeneous variates. In this work, we propose and compare three representation learning algorithms over symbolized sequences which enables classification of heterogeneous time-series data using a deep architecture. The proposed representations are trained jointly along with the rest of the network architecture in an end-to-end fashion that makes the learned features discriminative for the given task. Experiments on three real-world datasets demonstrate the effectiveness of the proposed approaches.", "keywords": []}, "meta": {"decision": "Reject", "comment": "The main strengths and weaknesses pointed out by the reviewers were:\n \n Strengths\n -Domain is interesting, problem is important (R2, R1)\n -Discretization of continuous domain may enable leveraging of advanced tools developed for discrete domains, e.g. NLP (R1)\n \n Weaknesses\n -Issues with experiments: models under-capacity, omission of obvious baselines (R1, R3)\n -Unclear conclusion: is quantization and embedding superior to working with the raw data? (R1)\n -Fair amount of relevant work omitted (R1, R3)\n \n While the authors engaged in the pre-review discussion, they did not respond to the official reviews. Therefore I have decided to align with the reviewers who are in consensus that the paper does not meet the acceptance bar."}, "review": {"HJ8JBjKwg": {"type": "rebuttal", "replyto": "HkVGxmGVx", "comment": "- The LSTMs (one layer each of 8, 16, and 15 cells, respectively) used in the three experiments sound *very* under capacity given the complexity of the tasks and the sizes of the data sets (tens to hundreds of thousands of sequences).\n\nFor these three experiments, we tried LSTMs with more cells (16, 32, 64,128 cells), and more cells did not seem to give performance improvement but overfitting. For hard-drive dataset, we found 8 cells in LSTM was enough by cross-validation. It is reasonable because a logistic regression classifier, which is only able to learn linear decision boundaries, gives good performance already. For the seizure dataset, we used a CNN with 16 filters and an iRNN with 32 cells, not 16 cells LSTM. We tried to apply an iRNN or LSTM with 16, 32, 64, 128 cells directly on raw data or symbolized data and they all had poor performance, so we added a CNN layer to help model extract features. The final model architecture was selected by cross-validation. For the heat system dataset, we used an LSTM of 15 nodes. We observed that LSTMs with 32 cells or more resulted in overfitting, and the one with 15 cells gave the best performance.\n\n\n- That might explain both the relatively small gap between the LSTMs and logistic regression *and* the improvement of the embedding-based LSTMs. Hypothetically, if quantizing the inputs is really useful, the raw data LSTMs should be able to learn this transformation, but if they are under capacity, they might not be able to do so.\n\nKindly let us know which experimental results you are referring to regarding \u201csmall gap\u201d. If they are referring to the one on hard-drive dataset, the gap between LR and LSTM on raw data, and LSTM+ICE is not small in terms of AUC (0.851, 0.865 vs 0.893). Of course, selecting which number as the performance measure of a classifier is subjective and application dependent. If this is regarding the result on heating system dataset, then the fact that the LR and LSTM models are trained on hand-engineered features has been overlooked. We should emphasize that hand-engineering features is a time-consuming procedure and achieving the same level of performance but without doing feature engineering is still a big advantage. The inputs are different (119 vs 20 input size) and the models (~100 cells vs 15 cells in LSTMs) have totally different capacity. Small gap, in this case, indicates the success of symbolization methods in effectively capturing the domain-dependent features from raw data. Note that we also tried using raw data, instead of using hand-engineered features, on this application but we couldn't get good results with raw data and thus its performance is not reported. This will be further emphasized in the revised version of the paper.\n\n- What is more, using the same architecture (# layers, # units, etc.) for very different kinds of inputs (raw, WdE, SCE, ICE, hand-engineered features) is poor methodology. Obviously, hyperparameters should be tuned independently for each type of input.\n\nThanks for your comments. The main contribution of our paper is not to show that symbolization results in state-of-the-art performance, but to show symbolization and embedding layers provides a unified framework to deal with heterogeneous inputs, instead of hand-engineering features or feeding raw data. Moreover, we wanted to control the capacity of the models to be similar. However, we will include the result using individually optimized hyper-parameters in the next version of our paper.\n", "title": "Re: Unique angle for modeling heterogeneous sequences"}, "HyJqVsKDe": {"type": "rebuttal", "replyto": "rk8oEfM4e", "comment": "- did you investigate how sensitive model architecture (# hidden layers, # units in each layer, etc.) was to choice of partition size? If your claim is \"not very sensitive,\" can you offer empirical evidence to back this up?\n\nYes, we investigated the sensitivity of model architecture. In particular, the ICE algorithm is insensitive to the partition sizes which are reasonably large. The table below summarizes the model performance given different symbol sizes for the seizure prediction task.\n\nModel Architecture:  ICE + CNN(16 filters, 5 filter length) + iRNN(32 hidden nodes)\n>> Symbol Size :      10      20      30      40      50\n>> AUC            :    0.808    0.811   0.807   0.801   0.803\n>> Balanced Acc:    0.759    0.765   0.757   0.755   0.753\n\nWe will include more experimental results in the next version of our paper.\n\n- for your non-symbolic LSTM baselines, how did you preprocess the continuous channels? Did you do any kind of normalization or rescaling? If not, could the inferior performance of the non-symbolic LSTM be explained by poor conditioning of the inputs?\n\nWe did 5 fold cross-validation and standardization as preprocessing, i.e. we transformed each channel of data to have zero mean and unit variance with the mean and variance calculated over the training set, and used them to normalize the training, validation and test sets.\n\n- did you try using an embedding layer for the raw continuous values, rather than feeding them directly into the LSTM?\n\nThank you for the suggestion. We applied a shared fully-connected layer on raw continuous values of each timestep and then LSTM, and the model performance did not improve compared to the baseline model which directly fed raw values to LSTM. We will include the experimental results in the next version of our paper.\n", "title": "Re: Is the ad hoc symbolization step necessary?"}, "rk8oEfM4e": {"type": "review", "replyto": "Hy8X3aKee", "review": "Can you comment on the following:\n- did you investigate how sensitive model architecture (# hidden layers, # units in each layer, etc.) was to choice of partition size? If your claim is \"not very sensitive,\" can you offer empirical evidence to back this up?\n- for your non-symbolic LSTM baselines, how did you preprocess the continuous channels? Did you do any kind of normalization or rescaling? If not, could the inferior performance of the non-symbolic LSTM be explained by poor conditioning of the inputs?\n- did you try using an embedding layer for the raw continuous values, rather than feeding them directly into the LSTM?Because the authors provided no further responses to reviewer feedback, I maintained my original review score.\n\n-----\n\nThis paper takes a unique approach to the modeling of heterogeneous sequence data. They first symbolize continuous inputs using a previously described approach (histograms or maximum entropy), the result being a multichannel discrete sequence (of symbolized time series or originally categorical data) of \"characters.\" They then investigate three different approaches to learning an embedding of the characters at each time step (which can be thought of as a \"word\"):\n1) Concatenate characters into a \"word\" and then apply standard lookup-based embeddings from language modeling (WDE)\n2) Embed each character independently and then sum over the embeddings (SCE)\n3) Embed each character as a scalar and concatenate the scalar embeddings (ICE)\nThe resulting embeddings can be used as inputs to any architecture, e.g., LSTM. The paper applies these methods primarily to event detection tasks, such as hard drive failures and seizures in EEG data. Empirical results largely suggest the a recurrent model combined with symbolization/embedding outperforms a comparable recurrent model applied to raw data. Results are inconclusive as to which embedding layer works best.\n\nStrengths:\n- The different embedding approaches, while simple, are designed to tackle a very interesting problem where the input consists of multivariate discrete sequences, which makes it different from standard language modeling and related domains. The proposed approaches offer several different interesting perspectives on how to approach this problem.\n- The empirical results suggest that symbolizing the continuous input space can improve results for some problems. This is an interesting possibility as it enables the direct application of a variety of language modeling tools (e.g., embeddings).\n\nWeaknesses:\n- The LSTMs (one layer each of 8, 16, and 15 cells, respectively) used in the three experiments sound *very* under capacity given the complexity of the tasks and the sizes of the data sets (tens to hundreds of thousands of sequences). That might explain both the relatively small gap between the LSTMs and logistic regression *and* the improvement of the embedding-based LSTMs. Hypothetically, if quantizing the inputs is really useful, the raw data LSTMs should be able to learn this transformation, but if they are under capacity, they might not be able to dos. What is more, using the same architecture (# layers, # units, etc.) for very different kinds of inputs (raw, WdE, SCE, ICE, hand-engineered features) is poor methodology. Obviously, hyperparameters should be tuned independently for each type of input.\n- The experiments omit obvious baselines, such as trying to directly learn an embedding of the continuous inputs.\n- The experimental results offer an incomplete, mixed conclusion. First, no one embedding approach performs best across all tasks and metrics, and the authors offer no insights into why this might be. Second, the current set of experiments are not sufficiently thorough to conclude that quantization and embedding is superior to working with the raw data.\n- The temporal weighting section appears out of place: it is unrelated to the core of the paper (quantizing and embedding continuous inputs), and there are no experiments to demonstrate its impact on performance.\n- The paper omits a large number of related works: anything by Eamonn Keogh's lab (e.g., Symbolic Aggregate approXimation or SAX), work on modifying loss functions for RNN classifiers (Dai and Le. Semi-supervised sequence learning. NIPS 2015; Lipton and Kale, et al. Learning to Diagnose with LSTM Recurrent Neural Networks. ICLR 2016), work on embedding non-traditional discrete sequential inputs (Choi, et al. Multi-layer Representation Learning for Medical Concepts. KDD 2016).\n\nThis is an interesting direction for research on time series modeling with neural nets, and the current work is a good first step. The authors need to perform more thorough experiments to test their hypotheses (i.e., that embedding helps performance). My intuition is that a continuous embedding layer + proper hyperparameter tuning will work just as well. If quantization proves to be beneficial, then I encourage them to pursue some direction that eliminates the need for ad hoc quantization, perhaps some kind of differentiable clustering layer?", "title": "Is the ad hoc symbolization step necessary?", "rating": "3: Clear rejection", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "HkVGxmGVx": {"type": "review", "replyto": "Hy8X3aKee", "review": "Can you comment on the following:\n- did you investigate how sensitive model architecture (# hidden layers, # units in each layer, etc.) was to choice of partition size? If your claim is \"not very sensitive,\" can you offer empirical evidence to back this up?\n- for your non-symbolic LSTM baselines, how did you preprocess the continuous channels? Did you do any kind of normalization or rescaling? If not, could the inferior performance of the non-symbolic LSTM be explained by poor conditioning of the inputs?\n- did you try using an embedding layer for the raw continuous values, rather than feeding them directly into the LSTM?Because the authors provided no further responses to reviewer feedback, I maintained my original review score.\n\n-----\n\nThis paper takes a unique approach to the modeling of heterogeneous sequence data. They first symbolize continuous inputs using a previously described approach (histograms or maximum entropy), the result being a multichannel discrete sequence (of symbolized time series or originally categorical data) of \"characters.\" They then investigate three different approaches to learning an embedding of the characters at each time step (which can be thought of as a \"word\"):\n1) Concatenate characters into a \"word\" and then apply standard lookup-based embeddings from language modeling (WDE)\n2) Embed each character independently and then sum over the embeddings (SCE)\n3) Embed each character as a scalar and concatenate the scalar embeddings (ICE)\nThe resulting embeddings can be used as inputs to any architecture, e.g., LSTM. The paper applies these methods primarily to event detection tasks, such as hard drive failures and seizures in EEG data. Empirical results largely suggest the a recurrent model combined with symbolization/embedding outperforms a comparable recurrent model applied to raw data. Results are inconclusive as to which embedding layer works best.\n\nStrengths:\n- The different embedding approaches, while simple, are designed to tackle a very interesting problem where the input consists of multivariate discrete sequences, which makes it different from standard language modeling and related domains. The proposed approaches offer several different interesting perspectives on how to approach this problem.\n- The empirical results suggest that symbolizing the continuous input space can improve results for some problems. This is an interesting possibility as it enables the direct application of a variety of language modeling tools (e.g., embeddings).\n\nWeaknesses:\n- The LSTMs (one layer each of 8, 16, and 15 cells, respectively) used in the three experiments sound *very* under capacity given the complexity of the tasks and the sizes of the data sets (tens to hundreds of thousands of sequences). That might explain both the relatively small gap between the LSTMs and logistic regression *and* the improvement of the embedding-based LSTMs. Hypothetically, if quantizing the inputs is really useful, the raw data LSTMs should be able to learn this transformation, but if they are under capacity, they might not be able to dos. What is more, using the same architecture (# layers, # units, etc.) for very different kinds of inputs (raw, WdE, SCE, ICE, hand-engineered features) is poor methodology. Obviously, hyperparameters should be tuned independently for each type of input.\n- The experiments omit obvious baselines, such as trying to directly learn an embedding of the continuous inputs.\n- The experimental results offer an incomplete, mixed conclusion. First, no one embedding approach performs best across all tasks and metrics, and the authors offer no insights into why this might be. Second, the current set of experiments are not sufficiently thorough to conclude that quantization and embedding is superior to working with the raw data.\n- The temporal weighting section appears out of place: it is unrelated to the core of the paper (quantizing and embedding continuous inputs), and there are no experiments to demonstrate its impact on performance.\n- The paper omits a large number of related works: anything by Eamonn Keogh's lab (e.g., Symbolic Aggregate approXimation or SAX), work on modifying loss functions for RNN classifiers (Dai and Le. Semi-supervised sequence learning. NIPS 2015; Lipton and Kale, et al. Learning to Diagnose with LSTM Recurrent Neural Networks. ICLR 2016), work on embedding non-traditional discrete sequential inputs (Choi, et al. Multi-layer Representation Learning for Medical Concepts. KDD 2016).\n\nThis is an interesting direction for research on time series modeling with neural nets, and the current work is a good first step. The authors need to perform more thorough experiments to test their hypotheses (i.e., that embedding helps performance). My intuition is that a continuous embedding layer + proper hyperparameter tuning will work just as well. If quantization proves to be beneficial, then I encourage them to pursue some direction that eliminates the need for ad hoc quantization, perhaps some kind of differentiable clustering layer?", "title": "Is the ad hoc symbolization step necessary?", "rating": "3: Clear rejection", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "S1DL1game": {"type": "rebuttal", "replyto": "HyRBiq_mx", "comment": "Thank you very much for the question. Below is the answer:\n\nThe Symbol size is a hyper-parameter to be tuned for the 3 symbolization methods. But it has different effects.\n\n1. The symbol size for WdE determines the number of OOV words. So a large symbol size for a continuous variable is likely to cause failure of training.\n\n2. The symbol size for SCE determines the number of parameters for a variable. If the symbol size of a variable is D and embedding size of it is N, then the number of parameters for this variable will be D*N. Larger D could result in overfitting.\n\n3. The symbol size for ICE does not seriously influence a model's performance, because it only adds D parameters to the model and the order constraint serves as regularization for the added parameters.\n\nFor all the experimental results in the paper, we only used small symbol sizes of 3 or 4 for a continuous variable when using WdE; symbol size of 20 for SCE; for ICE, we observed that the model's performance was not sensitive to this number, so we selected 50 as the symbol sizes for all continuous variables.\n\nIf there is still something not clear to you, please kindly let us know.\n", "title": "Re: Alphabet size"}, "HyRBiq_mx": {"type": "review", "replyto": "Hy8X3aKee", "review": "I guess the alphabet size is a magic number. How does the performance change over different alphabet sizes? Do you pick 4 or 50 which maximizes the performance? The paper compare three representation learning algorithms over symbolized sequences. Experiments are executed on several prediction tasks. The approach is potentially very important but the proposed algorithm is rather trivial. Besides detailed analysis on hyper parameters are not described. \n", "title": "Alphabet size", "rating": "4: Ok but not good enough - rejection", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "BypzQJLNg": {"type": "review", "replyto": "Hy8X3aKee", "review": "I guess the alphabet size is a magic number. How does the performance change over different alphabet sizes? Do you pick 4 or 50 which maximizes the performance? The paper compare three representation learning algorithms over symbolized sequences. Experiments are executed on several prediction tasks. The approach is potentially very important but the proposed algorithm is rather trivial. Besides detailed analysis on hyper parameters are not described. \n", "title": "Alphabet size", "rating": "4: Ok but not good enough - rejection", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "SkkazeU7g": {"type": "rebuttal", "replyto": "BJHN_hyme", "comment": "Thank you for the question. Below are the differences between our work and the PixelRNN paper:\n\n1. Problems these models are trying to tackle: PixelRNN models perform an unsupervised task of probability density estimation for input images whereas our models perform a supervised task of event prediction.\n\n2. Property of Input Data: Input data to PixelRNN models are images with pixel values from 0 to 255. In our work, input data are heterogeneous time-series data consisting of both numerical and categorical data. \n\n3. Symbolization: In PixelRNN paper, image input is directly fed into the network. In our paper, input data are first symbolized using algorithms such as maximum entropy partitioning. The representation of the symbolized data is then jointly learned in an embedding layer along with the rest of the architecture. Symbolization and embedding representation proposed in our work provides a unified framework for handling heterogeneous inputs. The PixelRNN paper does not contain any symbolization step or embedding layer.\n \nSimilarities to PixelRNN paper:\nThe pixelRNN uses a discrete multinomial distribution (softmax) to model the distribution of images, which has the advantage of being arbitrarily multimodal without prior on the shape of the input. This shares similarity with our work where the numerical inputs can be arbitrary multimodal although we do not explicitly model it using a multinomial distribution. Another obvious similarity is of course the fact that both papers process the inputs in a sequential fashion.\n\nIf there\u2019s a specific aspect of PixelRNN work that you had in mind which we missed to address above, kindly let us know and we can clarify that part.", "title": "Re: References and comparison to PixelRNN"}, "BJHN_hyme": {"type": "review", "replyto": "Hy8X3aKee", "review": "This work on symbolisation and word embedding on symbolised sequences shares similar principles with the recently introduced work on PixelRNNs (quantization of the continuous signal, classification instead of regression tasks). Could you elaborate on similarities and differences between your method and PixelRNN?In absence of authors' responses, the rating is maintained.\n\n---\n\nThis paper introduces an approach for learning predictive time series models that can handle heterogenous multivariate sequence. The first step is in three possible ways to perform embedding of the d-dimensional sequences into d-character words, or a sum of d character embeddings, or a concatenation of d character embeddings. The embedding layer is the first layer of a deep architecture such as LSTM. The models are then trained to perform event prediction at a fixed horizon, with temporal weighting, and applied to hard disk or heating system failures or seizures.\n\nThe approach is interesting and the results seem to outperform an LSTM baseline, but need additional clarification.\n\nThe experimental section on seizure prediction is very short and would need to be considerably extended, in an appendix. What are the results obtained using LSTM vs. RNN? What is the state-of-the-art on that dataset? Given that EEG data contain mostly frequential information, how is this properly handled in per-sample embeddings?\n\nPlease also extend your reference and previous work section to include PixelRNN as well as: \n* van den Oord, et al. (2016)\nWaveNet: A Generative Model for Raw Audio\narXiv 1609.03499\n* Huang et al. (2013)\n\"Learning deep structured semantic models for web search using clickthrough data\"\nCIKM\nIn the latter paper, the authors embedded 3-gram hashes of the input sequences (e.g., text), which is somewhat similar to a time-delay embedding of the input sequence.\n", "title": "References and comparison to PixelRNN", "rating": "5: Marginally below acceptance threshold", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "HJ1KdtWVe": {"type": "review", "replyto": "Hy8X3aKee", "review": "This work on symbolisation and word embedding on symbolised sequences shares similar principles with the recently introduced work on PixelRNNs (quantization of the continuous signal, classification instead of regression tasks). Could you elaborate on similarities and differences between your method and PixelRNN?In absence of authors' responses, the rating is maintained.\n\n---\n\nThis paper introduces an approach for learning predictive time series models that can handle heterogenous multivariate sequence. The first step is in three possible ways to perform embedding of the d-dimensional sequences into d-character words, or a sum of d character embeddings, or a concatenation of d character embeddings. The embedding layer is the first layer of a deep architecture such as LSTM. The models are then trained to perform event prediction at a fixed horizon, with temporal weighting, and applied to hard disk or heating system failures or seizures.\n\nThe approach is interesting and the results seem to outperform an LSTM baseline, but need additional clarification.\n\nThe experimental section on seizure prediction is very short and would need to be considerably extended, in an appendix. What are the results obtained using LSTM vs. RNN? What is the state-of-the-art on that dataset? Given that EEG data contain mostly frequential information, how is this properly handled in per-sample embeddings?\n\nPlease also extend your reference and previous work section to include PixelRNN as well as: \n* van den Oord, et al. (2016)\nWaveNet: A Generative Model for Raw Audio\narXiv 1609.03499\n* Huang et al. (2013)\n\"Learning deep structured semantic models for web search using clickthrough data\"\nCIKM\nIn the latter paper, the authors embedded 3-gram hashes of the input sequences (e.g., text), which is somewhat similar to a time-delay embedding of the input sequence.\n", "title": "References and comparison to PixelRNN", "rating": "5: Marginally below acceptance threshold", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "rkbkeAy-l": {"type": "rebuttal", "replyto": "SJ17TUCll", "comment": "Thanks for the comment. The paper has been resubmitted with the correct font.", "title": "Resubmitted the paper with correct font"}, "SJ17TUCll": {"type": "rebuttal", "replyto": "Hy8X3aKee", "comment": "Dear Authors,\n\nPlease resubmit your paper in the ICLR 2017 format with the correct font for your submission to be considered. Thank you!", "title": "ICLR Submission Format"}}}