{"paper": {"title": "AdaGCN: Adaboosting Graph Convolutional Networks into Deep Models", "authors": ["Ke Sun", "Zhanxing Zhu", "Zhouchen Lin"], "authorids": ["~Ke_Sun3", "~Zhanxing_Zhu1", "~Zhouchen_Lin1"], "summary": "We propose a novel RNN-like deep graph neural network architecture by incorporating AdaBoost into the computation of network.", "abstract": "The design of deep graph models still remains to be investigated and the crucial part is how to explore and exploit the knowledge from different hops of neighbors in an efficient way. In this paper, we propose a novel RNN-like deep graph neural network architecture by incorporating AdaBoost into the computation of network; and the proposed graph convolutional network called AdaGCN~(Adaboosting Graph Convolutional Network) has the ability to efficiently extract knowledge from high-order neighbors of current nodes and then integrates knowledge from different hops of neighbors into the network in an Adaboost way. Different from other graph neural networks that directly stack many graph convolution layers, AdaGCN shares the same base neural network architecture among all ``layers'' and is recursively optimized, which is similar to an RNN. Besides, We also theoretically established the connection between AdaGCN and existing graph convolutional methods, presenting the benefits of our proposal. Finally, extensive experiments demonstrate the consistent state-of-the-art prediction performance on graphs across different label rates and the computational advantage of our approach AdaGCN~\\footnote{Code is available at \\url{https://github.com/datake/AdaGCN}.}.", "keywords": ["Graph Neural Networks", "AdaBoost"]}, "meta": {"decision": "Accept (Poster)", "comment": "Three of the reviewers are very positive about this work, and R3 is slightly concerned about the datasets, writing, and notations etc. The authors responded to these concerns in detail and have agreed to take care of these comments. Thus an accept is recommended based on the understanding that the authors will fulfil their commitments."}, "review": {"_T2_vYCBfgj": {"type": "rebuttal", "replyto": "mCzESxYkOse", "comment": "We thank you for your recommendation for acceptance. Here is our clarification. \n\n1. RNN-like architecture.\n\nYou are right that each classifier shares the same architecture, but their parameters are different. Thus, we claim that AdaGCN is only an RNN-like architecture and we will highlight this difference from RNN in the revised version.\n\n2. Some discussion.\n\nThank you for your suggestion. We will include more discussion on the global attention methods and sampling-based methods in the revised version.", "title": "Response to Reviewer 4"}, "trBN_XgGJZV": {"type": "rebuttal", "replyto": "zvBJALHzCXw", "comment": "Thank you for your constructive feedback. We answer your questions below:\n\n1. Reddit dataset.\n\nAs stated on page 8 of our paper, Reddit is a relatively simple dataset as it has a high label rate (65.9%). Thus, it can be understood that some previous methods can still achieve similar performance on this simple dataset. However, from the comparison of computation cost shown in the left part of Figure 4, we observed that GraphSAGE-mean has a comparable computation cost with GCN. Plus, the huge advantage of per-epoch training time of AdaGCN compared with GCN as shown in Table 4, can provide sufficient empirical proof to demonstrate that AdaGCN still significantly outperforms Graph-SAGE and similar methods in terms of computation cost.\n\n2. Writing.\n\nThank you for this suggestion about writing. We promise to correct typos and improve the presentation in the revised version.\n\n3. Notations.\n\nWhen $K$ refers to the number of classes, it is natural to leverage $k$ to refer to the specific category of a node. Besides, $w_i$ indicates the weight of node $i$ while $w^l$ represents the all weight matrix of nodes in the $l$-th base classifier, for which we used the superscript for the distinguishment. We will make the definitions of notations clearer.\n\n4. Time complexity.\n\nIn our experiments, we evaluate the efficiency of different GCN approaches under the same framework while observing the limited variance of training time. We will add the analysis of time and memory complexity if accepted.\n\n5. Figure 4.\n\nThe nearly constant tendency stems from the computational advantage of AdaGCN, for which we conducted a rigorous analysis in Section 3. Concretely speaking, our RNN-like architecture avoids the additional computation related to sparse matrices A in a network. Thus, the linear tendency will continue even after 10 layers.\n", "title": "Response to Reviewer 3"}, "J6kdP-xSrhj": {"type": "rebuttal", "replyto": "kKffE7JkQ9a", "comment": "We thank you for your recommendation for acceptance. Here is our clarification.\n\n[1] Noisy nodes\n\nRobustness against noisy nodes is an interesting issue. However, we argue that the issue you mentioned may not happen in our AdaGCN, mainly due to the fact that we have employed the early stopping mechanism. During the layer-wise optimization, if higher-order graph convolution achieves worse performance, early stopping, which serves as a regularization, can help avoid this performance degradation and finally selects a model with a relatively small number of layers. We will leave this issue as the future work to explore.\n\n[2] Table 2\n\nWe argue that they are sufficiently close although there is a slight gap. Randomness may be part of the reasons.\n\n[3] Fast-GCN\n\nWe conjecture that it is linked with the sensitivity of hyper-parameters about important sampling in FastGCN. Specifically, our preprocessing of the graphs, which followed Klicpera et al., 2018, is slightly different from FastGCN, and for convenience, we still used the default optimal hyper-parameters of FastGCN for each dataset, respectively. Thus, the sensitivity of sampling hyper-parameters in FastGCN might cause a slight decreasing in its efficiency on some datasets. Overall, we can still admit the efficacy of FastGCN, but we are expected to carefully tune its hyper-parameters of sampling in the practice. Moreover, it is also safe to claim that our AdaGCN is competitive in computation efficiency.\n", "title": "Response to Reviewer 1"}, "4nW4WVzP79c": {"type": "rebuttal", "replyto": "PmccgXMlmUr", "comment": "We thank you for your recommendation for acceptance. Here is our response.\n\n1. Generalization guarantee. \n\nThank you for this suggestion. We will consider adding a formal justification for the generalization guarantee of our method derived from the boosting theory in the revised version. \n\n2. Figure 4.\n\nThe nearly constant tendency stems from the computational advantage of AdaGCN, which we analyzed in Section 3. Concretely speaking, our special RNN-like architecture avoids the additional computation related to sparse matrices A in a network. At your suggestion, we will provide more explanation about this phenomenon in the experimental part. Thank you for this suggestion. \n", "title": "Response to Reviewer 2"}, "Nd3MkkC5XLx": {"type": "rebuttal", "replyto": "HakdAw6ehOt", "comment": "Thank you. Your recent work is also insightful and effective, and it is also strongly linked with our work. We will cite your work in our related work part.", "title": "Thank you!"}, "zvBJALHzCXw": {"type": "review", "replyto": "QkRbdiiEjM", "review": "By integrating Adaboosting and a fully connected layer, this paper provides a new graph neural network structure. The objective of this paper is to design a deeper graph models in an efficient way for better performance. The computational efficiency and performance of the proposed algorithm are evaluated using the task of node property prediction on several public datasets. This is a new variant of GNN, but the quality this paper is lower than the expectation regarding to the clarity and organisation. \n\nPros: \n1.\tThe algorithm integrated Adaboosting for graph data. Thus, AdaGCN could utilise different levels of node features for final prediction. \n2.\tThe method is optimised in a layer-wise way rather than the traditional GCN optimisation, which is similar to the optimisation of recurrent neural networks. \n3.\tAuthors compared the structure of AdaGCN with that of other GNN variants. \n4.\tFor the experiments, the proposed algorithm is more computationally efficient, and achieves better performance on the task of node property prediction.  The performance of AdaGCN is slightly more robust than previous methods. The performance drop is not observed within 10 layers for AdaGCN as shown in Fig 3. \n\nCons: \n1.\tSpeaking of the state of art performance, GraphSAGE with LSTM also achieves a 95.4% F1 score on the Reddit dataset for node classification tasks. Thus, the authors may need to compare the training time and performance with more recent algorithms, like ClusterGCN and GraphSAGE. \n2.\tThe paper is not well written. Many typos are discovered. For example, extra space is added in the first sentence after equation 3. Meanwhile, the punctuation around equations is not consistent. For the full sentence following an equation, one would place a full stop after the equation. However, there is no full stop after equations 5, 6, 7, and 8. Abbreviations, such as \"JK\", \"APPNP\", and \"PPNP\", are used before introduction. \n3.\tSome notations are confusing and misleading. $K$ refers to the number of node categories, and $k$ refers to a category of a node. Meanwhile, $w_i$ and $W^{l}$ have completely irrelevant definitions. \n4.\tTo evaluate the efficiency of different GCN approaches, the authors listed the per-epoch training time of methods. The implementation of GCN with different frameworks would result in the large variance of training time. It is better that the authors could include the time and memory complexity of each algorithm. \n5.\tFig 4, after 10 layers, it is not clear whether the linear trend would continue. This result is a bit misleading.\n", "title": "AdaGCN: Adaboosting Graph Convolutional Networks Into Deep Models", "rating": "5: Marginally below acceptance threshold", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "kKffE7JkQ9a": {"type": "review", "replyto": "QkRbdiiEjM", "review": "Overall, the proposed AdaGCN model could incorporate the different hops of neighbors into the network in an Adaboost way without improving the computational cost. That has been confirmed by the theoretical comparison with other baselines and the experimental results.\n\nPros:\n[1] It proposed a novel deep graph neural network by incorporating AdaBoost into the computation of network.\n[2] It compared to the existing related work to illustrate the benefits of the proposed AdaGCN.\n[3] The experiments demonstrate its effectiveness of efficiency of AdaGCN on encoding the high-order graph structure information.\n\nCons:\n[1] The simplified graph convolution might be vulnerable to the noisy nodes. That is, when there exists one noisy node with abnormal attributes, this simplified graph convolution might be significantly degraded. Thus, the higher-order convolution in the proposed method might become worse.\n[2] In table 2, it is confusing why the implemented methods (e.g., PPNP (ours), APPNP (ours)) have lower performance than the results reported in the literature (Klicpera et al., 2018).\n[3] In Section 4.3, it shows that Fast-GCN has fastest speed in Pubmed, but slower than GCN on Cora-ML and MS-Academic datasets. That might need more explanation since intuitively the goal of Fast-GCN is to improve the efficiency of GCN.", "title": "This paper proposed a novel RNN-like deep graph neural network architecture by incorporating AdaBoost into the computation of network for extracting the knowledge from high-order local neighborhood.", "rating": "6: Marginally above acceptance threshold", "confidence": "5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature"}, "PmccgXMlmUr": {"type": "review", "replyto": "QkRbdiiEjM", "review": "Summary\nIn this paper, the authors study graph convolutional networks, where they propose to use AdaBoost for Deep GCNs. This method makes it possible to use information from multi-hop neighbours. Computationally, the proposed method is efficient, which is illustrated through various experiments. The paper is well written with good clarity, while the proposed method is novel and significant to the research community. \n\nReasons for recommending acceptance\n- To that of reviewer's knowledge, the proposed scheme is novel. The method address the issue of using information for higher-order neighbours, without increasing the computational complexity. \n- comprehensive experiments across multiple datasets, evaluating AdaGCN in terms of computational efficiency, accuracy, dependency on the number of layers. \n\nQuestions\n- While comparing MixHop against AdaGCN, the authors mention that AdaGCN does have generalization guarantees from Boosting theory. This statement is loose, and a formal justification may be needed. \n- In Figure 4 (Right), where the epoch time is measured against the number of layers, AdaGCN is shown to have nearly constant time w.r.t. layers. Some more explanation would be useful in understanding this. \n\n\n\n", "title": "Adaboosting GCNs", "rating": "7: Good paper, accept", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "mCzESxYkOse": {"type": "review", "replyto": "QkRbdiiEjM", "review": "##########################################################################\n\nSummary:\nThis paper incorporates AdaBoost into the deep graph neural network architecture, which has the ability to efficiently extract knowledge from high-order neighbors and then integrates knowledge from different hops of neighbors into the network in an Adaboost way. It solves the problem of oversmoothing. Extensive experiments show the effectiveness of the proposed method. \n\n##########################################################################\n\nPro:\n+ The paper is clear and well organized.\n+ The introduction of AdaBoost into the deep GNN is novel and interesting.\n+ The comparison with several existing methods is well analyzed in terms of both model architectures and computational advantages. \n+ Extensive experiments are conducted to demonstrate the consistent state-of-the-art performance of the proposed method.\n\n##########################################################################\n\nCons:\n- Although the same classifier architecture is adopted for $f^{(l)}_\\theta$, their parameters are different, which is different from RNN. It is better to avoid this confusion.\n\n- It would be better to include some discussion of the global attention methods (e.g., [Puny et al., 2020] ) and sampling-based methods (e.g., [Zeng et al., 2020]).\n\nReferences: \nPuny et al. From Graph Low-Rank Global Attention to 2-FWL Approximation. ICML Workshop Graph Representation Learning and Beyond, 2020.\n\nZeng et al. Graph sampling-based inductive learning method. ICLR \u201920, 2020.  ", "title": "Official Blind Review #4", "rating": "7: Good paper, accept", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}}}