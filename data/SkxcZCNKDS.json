{"paper": {"title": "If MaxEnt RL is the Answer, What is the Question?", "authors": ["Benjamin Eysenbach", "Sergey Levine"], "authorids": ["beysenba@cs.cmu.edu", "svlevine@eecs.berkeley.edu"], "summary": "We show that MaxEnt RL implicitly solves control problems with variability in rewards.", "abstract": "Experimentally, it has been observed that humans and animals often make decisions that do not maximize their expected utility, but rather choose outcomes randomly, with probability proportional to expected utility. Probability matching, as this strategy is called, is equivalent to maximum entropy reinforcement learning (MaxEnt RL). However, MaxEnt RL does not optimize expected utility. In this paper, we formally show that MaxEnt RL does optimally solve certain classes of control problems with variability in the reward function. In particular, we show (1) that MaxEnt RL can be used to solve a certain class of POMDPs, and (2) that MaxEnt RL is equivalent to a two-player game where an adversary chooses the reward function. These results suggest a deeper connection between MaxEnt RL, robust control, and POMDPs, and provide insight for the types of problems for which we might expect MaxEnt RL to produce effective solutions. Specifically, our results suggest that domains with uncertainty in the task goal may be especially well-suited for MaxEnt RL methods.", "keywords": ["reinforcement learning", "maximum entropy", "POMDP"]}, "meta": {"decision": "Reject", "comment": "This paper studies maximum entropy reinforcement learning in more detail. Maximum entropy is a popular strategy in modern RL methods and also seems used in human and animal decision making. However, it does not lead to optimize expected utility. The authors propose a setting in which maximum entropy RL is an optimal solution. \n\nThe authors were quite split on the paper, and there has been an animated discussion between the reviewers among each other and with the authors. \n\nThe technical quality is good, although one reviewer commented on the restricted setting of the experiments (bandit problems). The authors have addressed this by adding an additional experiment. Futhermore, two reviewers commented that the clarity of the paper could be improved. \n\nA larger part of the discussion (also the private discussion) revolved around relevance and significance, especially of the meta-pomdp setting that takes up a large part of the manuscript. \n- A reviewer mentioned that after reading the paper, it does not become more clear why maximum entropy RL works well in practice. The discussion even turned to why MaxEntropyRL might be *unreasonable* from the point of view of needing a meta-POMDP with Markov assumptions, which doesn't help shed light on its empirical success. The meta-POMDP setting does not seem to reflect the use cases where maximum entropy RL has done well in emperical studies. \n- Another reviewer mentioned that earlier papers have investigated maximum entropy RL, and that the paper tries to offer a new perspective with the Meta-POMDP setting. The discussion of this discussion was not deemed complete in current state and needs more attention (splitting the paper into two along these lines is a possibility mooted by two of the reviewers). A particular example was the doctor-patient example, where in the meta-POMDP setting the doctor would repeatedly attempt to cure a fixed sampled illness, rather than e.g. solving for a new illness each time. \n\nBased on the discussion, I would conclude that the topic broached by the paper is very relevant and timely, however, that the paper would benefit from a round of major revision and resubmission rather than being accepted to ICLR in current form. "}, "review": {"S1l8dhYsor": {"type": "rebuttal", "replyto": "Bkg3YJ8ojr", "comment": "Thanks for all the additional feedback on Appendix B!\n\n1a Perhaps the most important distinguishing factor is that we have efficient algorithms for MaxEnt RL. For example, current MaxEnt RL algorithms don't involve belief state estimation (as is necessary for solving many POMDPs) or solving a two-player game (as is necessary for many adversarial settings).\n\n1b. To clarify, the procedure in Appendix B.6 and experiment in Appendix B.7 are in a slightly different setting. While it is true that MaxEnt RL allows any policy to be converted into a reward function and vice-versa, the proofs of this fact that we give are not constructive, in the sense that constructing the corresponding reward function requires knowing the optimal policy apriori. The procedure in Appendix B.6 aims to lift this limitation, providing a reward function to which we can apply MaxEnt RL, _without_ requiring knowledge of the optimal policy. The experiment in Appendix B.7 shows that this (approximate) procedure works well.\n\n2. While the groundwork we lay for discussing robust-reward control (e.g., Lemmas B.1 - B.3) is not specific to MaxEnt RL, to the best of our knowledge the \"useful\" results (Thm 5.2 and Corollary B.4.1) apply uniquely to MaxEnt RL.\n\n3. We agree that the \"size\" of the set is somewhat confusing, which motivated us to visualize temperatures in two ways in Figure 6, depending on how you frame the question (what is the size of the robust set for a given MaxEnt RL reward function, or what is the size of the robust set that _includes_ a given MaxEnt RL reward function).  One way to automatically tune the temperature parameter might be to introduce the temperature as an additional parameter into the optimization problem in Eq 17.\n\n4. We have updated the paper to incorporate this suggestion.\n\n5. Thanks for catching this! We will clarify this proof for the final version of the paper.", "title": "Responses to questions"}, "rkgs4nKosB": {"type": "rebuttal", "replyto": "Bke_HgrsjS", "comment": "Thanks for the detailed correction -- we hadn't noticed that policies with memory achieved lower regret in this setting. We stand by our previous statement that MaxEnt RL is optimal among memoryless policies.\n\nBroadly, I think we agree that MaxEnt RL is _not_ optimal for maximizing reward in an MDP. As you noted above (and we noted in Section 2, paragraph 2), MDPs always have deterministic solutions. Nonetheless, MaxEnt RL algorithms seem adept at solving standard MDPs. This should strike you as quite odd -- why should optimizing objective A yield good performance on objective B? We do not have a full answer to this question, but believe that this question will be of interest to the ICLR community. We believe that the analysis in this paper provides a set of useful tools and mental models for studying this question, and will catalyze more work in understanding why MaxEnt RL works.", "title": "Thanks for the correction."}, "r1g4yrJjsr": {"type": "rebuttal", "replyto": "rJgfbuh_or", "comment": "Thanks for the detailed response; it was helpful for clarifying our own thinking as well. Below, we aim to convince you that (1) Markovian policies _are_ optimal for a carefully defined meta-POMDP, and (2) the notion of adversarially robustness discussed in Section 5 does \"generalize,\" in the sense that it affords robustness against other sorts of adversaries.\n\n*Meta-POMDP*\nThere's a version of the meta-POMDP where memoryless policies are optimal. When defining the meta-POMDP, it is important to consider whether the agent observes when the meta-episode terminates. If the agent observes that the meta-episode terminates, then an optimal agent will iterate over possible trajectories $\\tau$ in order of their density under $p(\\tau)$ and restart the processes whenever the target trajectory $\\tau^*$ is found. If, however, the agent does not observe when the meta-episode terminates, then this is not the optimal policy; the agent never knows when to restart at $\\arg\\max_\\tau p(\\tau)$. The optimal for this meta-POMDP is given in Section 4.2. The reason a memoryless policy is optimal for this carefully defined meta-POMDP is because no feedback is ever given, so the agent has nothing to remember.* We opted to exclude this discussion in the paper because we feared it would be overly confusing, but could include it if you think it would strengthen the paper.\n\nWe argue that this type of meta-POMDP is a reasonable model of many real-world settings. We give three examples:\n1. A patient tells his physician that he is ill. The physician prescribes a drug. The next week, the patient returns to his physician and says that he is still ill. The physician reasons that either (1) the first drug did not cure the first illness, or (2) the first drug did cure the first illness but the patient came down with a second illness. The physician must then decide which drug to prescribe for the next week. This process continues for many weeks. In this setting, regret corresponds to the number of weeks that the patient is sick. This type of scenario may occur in cancer treatment, where one drug may initially treat the cancer but suppress a patient's immune system and thus make him susceptible to other diseases.\n2. An ecologist wants to increase the salmon population in the Klamath River. Each year, the ecologist can decide to perform one of many treatments, such as restricting fishing, increasing the flow from upstream dams, or seeding the river with salmon larvae. The next year the ecologist returns and finds that the fish population remains the same. The ecologist reasons that either (1) the treatment was effective in increasing the salmon population but some other factor (e.g., increased sewage runoff) caused a subsequent decline, or (2) the treatment was not effective. The ecologist must then decide whether to repeat the treatment from the first year or to try a new treatment. In this setting, regret corresponds to the number of years where the salmon population is below some sustainable level.\n3. A school teacher hears a rumor that some students are shoplifting. The teacher can choose to talk with students to persuade them that shoplifting is bad. Obviously, none of the students will admit to the teacher that they shoplift. If the teacher talks with a student who shoplifted, the student will (unbeknownst to the teacher) return the stolen items. The student may still shoplift in the future. The teacher never learns which students shoplift, and must use his prior belief about who may shoplift to choose which students to talk with every day. In this setting, regret is to the average time before a stolen item is returned.\n\n*Adversarial Robustness*\nIn Section 5, we showed that MaxEnt RL was optimal for adversarial robustness against an adversary who chooses a reward function from a carefully defined set of reward functions (Eq 2). Does robustness against this adversary provide robustness against other adversaries? Yes. In Appendix B.6, Eq 17 converts an arbitrary set of reward functions into a set of reward functions of the type that MaxEnt RL is robust against. We then use MaxEnt RL to find the optimal robust policy for this new set of reward functions. Finally, we evaluate the policy found by MaxEnt RL for adversarial robustness against the _original_ set of reward functions. While, in theory (Corollary B.4.1) the policy obtained by MaxEnt RL is only a lower bound on the optimal minimax policy for the original set of rewards, empirically we find that it is nearly optimal: as shown in Fig 7, the \"generalization gap\" between the MaxEnt RL policy and the optimal minimax policy is quite small (9%).\n\nFootnote:\n* One potential criticism of this setting is that, since no feedback is ever given, it is impossible to learn the optimal policy by interacting with the environment. However, the reward function in Lemma 4.1 does provide feedback to the agent, and does so in such a way that the optimal MaxEnt RL policy is optimal for the meta-POMDP.", "title": "Why the settings we consider are reasonable"}, "SkggVGUdjS": {"type": "rebuttal", "replyto": "ByxLguBwsH", "comment": "(I think) Your understanding is correct: in the meta-POMDP, there is a single trajectory $\\tau^*$ that gets reward. For goal-reaching tasks, there might exist multiple trajectories $\\tau$ that reach a particular goal state $s_T$. The goal-reaching meta-POMDP will sample one of these trajectories $\\tau^*$ that ends at the goal state $s_T$. The agent will receive reward if it exactly matches $\\tau^*$, but will not receive reward for any other trajectory, including one that reached the goal state $s_T$ via another path. The optimal policy is one that chooses uniformly among trajectories that end at goal state $s_T$. Note that, under this notion of optimality, a policy that always reaches the goal but uses a fixed trajectory to get there is not optimal.\n\nTo clarify the notation and results for the meta-POMDP, we have added a new Appendix D. Here, we  introduce a simple meta-POMDP, describe what meta-episodes, meta-steps, and regret mean in this simple meta-POMDP, and then discuss how the results from Section 4 apply to this meta-POMDP. We hope this clarifies the meta-POMDP definitions and results. Please let us know if anything is unclear.", "title": "Clarifying semantics of p(\u03c4) and a new toy example (Appendix D)"}, "BkxfusBOir": {"type": "rebuttal", "replyto": "ByxKXXDPjH", "comment": "You're absolutely correct that memoryless policies are not optimal for solving the meta-POMDP (We likewise hope our physicians are not memoryless.). I think your analysis is right. Enumerating over $n$ items will get us to the correct trajectory in $O(n)$ meta-steps while sampling uniformly at random will get us the correct trajectory in $O(n \\log(n))$ meta-steps (It's an instance of the coupon collector problem.).\n\nSo, why is this a reasonable setting to consider? Given that MaxEnt RL is an active area of research today, we believe that it is important to explain the problems settings for which MaxEnt RL is optimal. The somewhat unusual assumptions in these problems suggest that MaxEnt RL might be an unreasonable algorithm, and there may exist control algorithms that solve problems with fewer unusual assumptions. Nonetheless, we believe that explaining a widely used algorithm is a useful contribution.", "title": "MaxEnt RL might not be reasonable, but understand it is important."}, "HyljCAXEjH": {"type": "rebuttal", "replyto": "r1lPYRyHFS", "comment": "Thanks for the review and feedback for improving the paper!\n1. Typo in proof in A.1: Thanks for pointing this out this typo! We should be optimizing w.r.t. \\pi(\\tau), so the corresponding derivative should be dL/d\\pi(\\tau). We have fixed this typo and clarified that we are using constrained Euler-Langrange.\n2. Exploration: Yes, we agree that MaxEnt RL empirically performs good exploration. We have added a sentence to the Exploration paragraph in Section 2 to not dismiss this motivation.\n3. Oracle fictitious play: The fictitious play baseline has access to the rewards for all arms, not just the arm it selected (we clarified this halfway through the prior paragraph.). In contrast, the MaxEnt RL method only observes the rewards for the arm that it actually pulls.\n4. MaxEnt IRL: Thanks for this great suggestion! IRL is an ill-posed problem, so it lends itself quite naturally to approaches that can cope with reward variability. We conjecture (but have not proven) that MaxEnt IRL yields reward functions which, when combined with MaxEnt RL, guarantee that the resulting policy perform well on the unknown reward function. We have added some discussion of this to the conclusion.", "title": "Author Response"}, "ByeEpC7ViH": {"type": "rebuttal", "replyto": "rylwfsfRFH", "comment": "Thank you for the response. We appreciate the feedback and will work to incorporate it into the paper. As suggested, we ran additional experiments on four benchmark robotic control tasks from OpenAI Gym: HalfCheetah-v2, Walker2d-v2, Hopper-v2, and Ant-v2. These tasks have horizons up to 1000 steps, so they are useful for evaluating our claims about MaxEnt RL on long-horizon tasks. In our experiments, we find that while both standard RL and MaxEnt RL can maximize reward, only MaxEnt RL effectively maximizes worst-case reward. Fictitious Play fails to maximize worst-case reward on these tasks. We have added a new section to the Appendix (Appendix C) to include figures and a summary from this experiment. We believe that these experiments address the concern that the experiments were solely on bandit settings.\n\nWe have clarified the paper in the following ways. We have clarified the notation for \\pi* in the proof of Lemma 4.1 and added subsection headers to Section 3 to clarify that we introduce the two problem settings there. In Section 3.3, we highlight that these two problem settings are similar in that they both involve variability in the reward function. While these are the two settings that we know are equivalent to MaxEnt RL, we speculate that there are other equivalent problems. We leave this to future work. We have also clarified the paper by incorporating the suggestions from Reviewer #3. We believe that this addresses the concerns about clarity, but would welcome additional suggestions.\n\nClarifications\n1. Trajectory belief: There may be a misunderstanding here \u2014 we do not make any additional assumptions, as the trajectory belief is derived direction from the reward function (and vice-versa).\n2. Action in the last state: For notational simplicity, we included an action for every state so that we can say that the reward function is evaluated at each state-action pair. As there are no future states, the only effect of this action is in determining the reward given at the final step. If the reward function is defined solely in terms of the state, then we could ignore the action at the last state. Including the action at the last state means that we can view bandits as a special case, where there is only one state, and rewards are defined solely in terms of actions.\n3. Task sampling in the meta-POMDP: Yes, a new task is sampled i.i.d. at the start of each meta-episode. Of the distribution over tasks is finite, then it is possible that the same task is sampled for two consecutive meta-episodes.", "title": "Author Response"}, "BJxR9CmVor": {"type": "rebuttal", "replyto": "B1eC9jq0FH", "comment": "Thank you for the incredibly detailed review and the suggestions for improvement. We hope to persuade you that the setting we consider is actually quite reasonable. The assumption that the policy cannot improve within a single meta-episode is just a Markovian assumption; the policy can (and should) be improved between meta-episodes. You are right to note that our assumptions are conservative (i.e., pessimistic), so our analysis serves to lower bound performance in settings with more structure (e.g., providing rewards at every time step) with learning algorithms that could be more powerful (e.g., equipped with memory). We don't assume deterministic dynamics. While the meta-POMDP is well defined for arbitrary target distributions, our proof that MaxEnt RL solves the meta-POMDP does assume that there exists a policy that matches the target distribution. Note that this distribution can be defined in terms of feasible behaviors (e.g., as a mixture of previously observed behaviors), guaranteeing that it is possible to match this distribution. \n\nWe believe that our analysis is useful for understanding precisely what optimization problem MaxEnt RL is solving. While it remains an open question why MaxEnt RL works well in the single-task setting, we speculate that this paper is a step towards answering that question. We hypothesize MaxEnt RL may work because optimizing the worst-case reward might lead to good exploration (because the agent would seek to avoid previously observed, low-reward states) and might stabilize off-policy learning (because the actor would not purely exploit actions to which the critic spuriously assigned high value).\n\nWe believe that the reduction from a goal-reaching meta-POMDP to a trajectory-reaching meta-POMDP is valid. If the task is to reach a particular goal state, we define the trajectory distribution as placing equal probability on all trajectories that end in this goal. A policy that matches the target trajectory distribution by choosing uniformly among these trajectories will always arrive at the goal state. You are correct that there may be many trajectories that reach a goal, and this observation highlights a key difference between standard RL and MaxEnt RL: any policy that reaches the goal is optimal for the standard RL objective, but only the policy that is uniform over all goal-reaching trajectories is optimal for the MaxEnt RL objective. MaxEnt RL can therefore been seen as resolving ambiguity about which policy to choose. Our analysis suggests that the single policy chosen by MaxEnt RL is not arbitrary, but rather is one with desirable robustness properties.\n\nWe have clarified the paper with the following updates. We have fixed the typos mentioned and reworded paragraph 3 in the Introduction to emphasize that our analysis does not explain why MaxEnt RL works in the single task setting. We have added a paragraph to Section 4.1 to clarify the assumption that the policy does not change between meta-steps. We added an explanation of why the adversary in Theorem 5.2 is reasonable in the paragraph following this theorem. We believe that these modifications address all of the writing concerns, though we would welcome additional suggestions on how to clarify the paper.", "title": "Author Response"}, "r1lPYRyHFS": {"type": "review", "replyto": "SkxcZCNKDS", "review": "The paper investigates the reason behind the success of MaxEntropy in reinforcement learning theoretically, connecting it to  robust control.\n\nI  think the paper should be accepted, as it investigates an important approach and offers useful insight. I think that the robust reward is an interesting perspective and the paper is also well written.\n\nI need to remark that I am not familiar enough with RL theory literature to know of novel this work is,.\n\nDetailed remarks:\n- There is an error in the proof in A.1. You are optimizing a functional not a function, so the cannot simply use Lagrange multipliers (also the derivation ignores the integral). The problem is solved easily with (constrained) Euler-Lagrange and must be corrected.\n- I disagree with the exploration paragraph in sec. 2. While the final applied agent might be deterministic, using a stochastic agent for exploration during learning is helpful. Exploration might not be only (or main) motivation behind MaxEntRL but it still a good motivation.\n-  I was happy to see the limitation of lemma 4.1 stated clearly, as some paper are less honest with their limitations.\n- You write \"Only the oracle version of fictitious play, which makes assumptions not made by MaxEnt\", maybe I missed it but I didn't see what assumptions the oracle made.\n- MaxEnt has been very successful in inverse RL where we try to find the reward, which seems connected to the conclusions here about robustness to reward perturbations. While adding analysis on IRL might be outside the scope of this paper, something at least should be said about maxEnt and IRL and the connection to the current results. \n\nTypo:\n\"inference problem be defining\" -> \"inference problem by defining\"", "title": "Official Blind Review #2", "rating": "8: Accept", "confidence": 2}, "rylwfsfRFH": {"type": "review", "replyto": "SkxcZCNKDS", "review": "Summary :\nThe paper discusses the use of maximum entropy in Reinforcement Learning. Specifically, it relates the solution of the maximum entropy RL problem to the solutions of two different settings, 1) a \u2018meta-POMDP\u2019 regret minimization problem and 2) a \u2018robust reward control\u2019 problem. Both cases follow with simple experiments. \n\nI feel the paper could have been written more clearly. There seem to be too many definitions and descriptive examples that diverge the attention of the reader from the main problem setting. There are quite a bit of grammatical errors in the paper, making it even harder to follow. With these many definitions in the text, it is hard to make out the actual contributions of the work. Moreover, the experiments are restricted to the bandit setting and do not provide any empirical evidence on the MDP centered theory. Overall, although the paper does well in motivating the problem, the lack of rigorous experiments and poorly structured writing advocate for a weak rejection.\n\n\nComments/questions:\n- Can the authors comment on why it makes intuitive sense to study the meta-POMDP and robust reward control problem settings together? I see the commonality being the reward variability, but is there something else?\n- If one wants to solve the meta-POMDP through max entropy RL, how general/strong is the assumption that we are given access to the target trajectory belief?\n- In the goal reaching meta-POMDP, it makes sense to only have the final state distribution in the definition. What does the action taken in the final state signify?\n- It would be more intuitive to note the optimal solution as pi* and not pi (Lemma 4.1).\n- In the meta-POMDP, does the task change after every meta-episode?\n- I think it would be better to have separate, consistently named subsections devoted to defining the two problem settings and then move on to proving equivalence with the max entropy case.\n", "title": "Official Blind Review #1", "rating": "3: Weak Reject", "confidence": 3}, "B1eC9jq0FH": {"type": "review", "replyto": "SkxcZCNKDS", "review": "This paper aims to theoretically understand the reason that MaxEnt RL (RL with an entropy bonus) works so well. It suggests that MaxEnt RL works well in the setting where there is uncertainty about the reward function. It proves two main theorems to support this. First, for any instance of a class of \u201cmeta-POMDPs\u201d where the agent only has a *belief* over the goal trajectory, there exists a reward function for which MaxEnt RL on that reward function is the optimal solution to the meta-POMDP. Second, for any reward and MDP, there exists a set of reward functions such that MaxEnt RL maximizes the worst-case return for a reward chosen from that set.\n\nThe paper tackles an important question, since entropy bonuses are commonly used in RL, but are primarily a \u201chack\u201d added to incentivize exploration without any principled justification. However, I question the applicability of the theorems to the success of MaxEnt RL.\n\nI\u2019m recommending a weak reject, for the following reasons, in order of importance (explained in more detail later):\n- Section 4.2 assumes that you must deploy a single policy across all timesteps of the meta-POMDP, but it should be possible to update your policy across timesteps.\n- Section 4.3 claims to reduce goal-reaching problems to single-goal-trajectory problems, but this doesn\u2019t work because goal-reaching problems can have multiple optimal trajectories.\n- The adversary of Theorem 5.2 is quite unusual, and it is unclear why robustness to such an adversary should be useful.\n- Since the theorems are about cases where the agent is uncertain about the reward, they don\u2019t explain why MaxEnt RL is useful even in the case where we have no adversaries and care only about performance on a single reward function.\n- The paper is not very clear. The quality of exposition could be improved significantly.\n\nIt seems quite likely that some of my critiques are misguided (especially the one about Section 4.2), and I encourage the authors to point this out in the rebuttal.\n\n----\n\nMy primary complaint is that these theorems don\u2019t apply to the case they are meant to explain: the authors say they want to explain why MaxEnt RL works in practice, but their explanations and theorems center on cases in which the reward is unknown. But currently MaxEnt RL works well on tasks where the reward is known! It\u2019s not that MaxEnt RL finds different solutions that don\u2019t do well on the original reward but do better by some other criterion: the solutions found by MaxEnt RL are the best solutions when evaluated by the known reward.\n\nNonetheless, it is still an interesting question to study the benefits of MaxEnt RL in the context of reward uncertainty. I\u2019d recommend that the authors change the motivation and introduction to focus on that setting, without claiming to explain why MaxEnt RL works with current systems. For the rest of the review, I\u2019ll evaluate the paper from that perspective.\n\n----\n\nI found the section on meta-POMDPs very confusing. First, one minor confusion: I believe you are assuming that the underlying MDP is deterministic? (Perhaps not, but the assumption that there is a policy with probability proportional to sqrt(p(tau)) is much less likely to hold in stochastic environments.)\n\nSection 4.2 is confusing to me. First, let me quote the description of the meta-POMDP: \u201cEach meta-step of the meta-POMDP corresponds to one episode of the original MDP. A meta-episode is a sequence of meta-steps, which ends when the agent solves the task in the original MDP. Intuitively, each meta-episode in the meta-POMDP corresponds to multiple trials in the original MDP, where the task remains the same across trials. The agent keeps interacting with the MDP until it solves the task.\u201d\n\nBy my understanding, this means that in the meta-POMDP the agent is able to learn across episodes. In particular, in the setting where the agent has a distribution over a single goal trajectory, and the underlying MDP is deterministic, the optimal policy is obvious: try the most probable goal trajectory, then try the second most probable goal trajectory, and so on until you find the true goal trajectory, and then repeatedly execute that goal trajectory. Why is this not the result of Section 4.2?\n\n(My guess is that you assumed that the agent is not able to learn across episodes (why?), or that the agent receives literally zero information about whether or not it has completed the goal (highly unrealistic, and certainly doesn\u2019t apply to the physician example). Perhaps there is a different unstated assumption instead.)\n\nI\u2019d encourage the authors to more clearly formalize the meta-POMDP as well as the relevant assumptions that lead to the results of Section 4.2. As currently defined, I don\u2019t agree with Section 4.1, though I do think there is a formalization which makes everything work (though that formalization does not seem realistic to me).\n\n----\n\nI\u2019m also confused about Section 4.3. In Section 4 (before subsections) and Section 4.1, it seems that the model is that there is a *single* goal trajectory which the agent must replicate, but the agent is uncertain about that trajectory. However, Section 4.3 considers goal-reaching problems, in which there can be *multiple* goal trajectories. I don\u2019t understand how the goal-reaching problem is reduced to the single-goal-trajectory problem: I believe the current reduction is *not* solving a goal-reaching problem.\n\nFor simplicity, let\u2019s consider a goal-reaching problem where the goal is known: a 3x3 grid where the agent starts at the bottom left and the goal is to get to the top right. Assume a horizon of 4 for simplicity. Then any trajectory involving two Ups and two Rights solves the problem, i.e. there are six optimal trajectories: {UURR, URUR, URRU, RUUR, RURU, RRUU}. However, the meta-POMDP defined in the reduction assigns 1/6 probability to each such trajectory, which by the semantics of the meta-POMDP means that the agent \u201cactually\u201d wants to choose one of those trajectories in particular, but doesn\u2019t know which one is appropriate. This is not an accurate representation of the goal-reaching problem: the goal-reaching problem is solved as long as *any* of these trajectories are selected.\n\n(Lemma 4.2 is technically accurate, because it only talks about the meta-POMDP and the corresponding reward function, and doesn\u2019t claim anything about the relation to the goal-reaching problem, but all the prose around Lemma 4.2 is misleading.)\n\nThis general problem persists even if you have a belief over the goal state, rather than being certain about the goal state. You could try fixing this by changing the meta-POMDP to put probability over *sets* of goal trajectories, and Section 4.1 would still go through (the regret would be a geometric random variable of the probability the trajectory lies within the true goal trajectory set), but Section 4.2 would no longer work.\n\n----\n\nTheorem 5.2 shows that there exists a set of reward functions such that MaxEnt RL maximizes the worst-case return for a reward chosen from that set. Taken literally, this is not particularly interesting, as it is also true of regular RL: the optimal regular RL policy pi optimizes the worst-case return for the set { r\u2019(s, a) = r(s, a) + f(s, a) with f in F }, for any class of non-negative functions F that contains the zero function, simply because every other reward in the set is at least as large as the true reward r(s, a). (Another set that works is { r\u2019(s, a) = K r(s, a) with K > 0 }.)\n\nSo really the interesting content of the second theorem is the particular set of reward functions that MaxEnt RL is robust to: the set {r\u2019(s, a) = r(s, a) - log q(a | s) for all q in Pi}. This is an interesting adversary model: essentially, at every state, the adversary is required to provide a non-negative bonus b_a for each action a. To prevent the adversary from providing zero bonus everywhere, the bonuses must satisfy \\sum_a exp(b_a) = 1.\n\nThis essentially means that at each state, the adversary wants to find actions that the policy doesn\u2019t take, and allocate more of the bonus to that action. Given this particular adversary, it makes sense to inject a little noise into the policy so that the adversary can\u2019t \u201chide\u201d the bonus in actions that are rarely taken, and so it makes sense the MaxEnt RL could be the best response to such an adversary. However, this is quite a strange adversary -- we wouldn\u2019t usually expect that the things we need to be robust to are going to be dividing up some bonus across actions. So I\u2019m not very confident that this theorem will actually matter in practice.\n\n----\n\nTypos:\n\nAbstract: \u201cProbability, as this strategy is called,\u201d: \u201cProbability matching\u201d\nIntroduction: \u201cmodel for decision decision making\u201d: repeated \u201cdecision\u201d\nIntroduction: \u201cempirical benefits of MaxEnt RL arise implicitly solving\u201d: \u201carise by implicitly solving\u201d\nPreliminaries: \u201cThese approaches cast optimal control as an inference problem be defining\u201d: \u201cbe\u201d --> \u201cby\u201d\nPreliminaries: In the derivation of Eq. 1, p(s_1) was dropped\nPreliminaries: The last equality in the derivation of Eq. 1 would only hold if you had a log on the LHS, so you probably wanted to maximize log p(O_t) in the entirety of the derivation.\nLemma 4.2: \u201cp\u02dc(sT(\u03c4), aT(\u03c4)) = p(\u03c4)\u201d: Reverse the order to write \u201cp(\u03c4) = p\u02dc(sT(\u03c4), aT(\u03c4))\u201d to follow the convention that the thing being defined is on the LHS", "title": "Official Blind Review #3", "rating": "3: Weak Reject", "confidence": 3}}}