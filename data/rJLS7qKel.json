{"paper": {"title": "Learning to Act by Predicting the Future", "authors": ["Alexey Dosovitskiy", "Vladlen Koltun"], "authorids": ["adosovitskiy@gmail.com", "vkoltun@gmail.com"], "summary": "We present an approach to sensorimotor control in immersive environments.", "abstract": "We present an approach to sensorimotor control in immersive environments. Our approach utilizes a high-dimensional sensory stream and a lower-dimensional measurement stream. The cotemporal structure of these streams provides a rich supervisory signal, which enables training a sensorimotor control model by interacting with the environment. The model is trained using supervised learning techniques, but without extraneous supervision. It learns to act based on raw sensory input from a complex three-dimensional environment. The presented formulation enables learning without a fixed goal at training time, and pursuing dynamically changing goals at test time. We conduct extensive experiments in three-dimensional simulations based on the classical first-person game Doom. The results demonstrate that the presented approach outperforms sophisticated prior formulations, particularly on challenging tasks. The results also show that trained models successfully generalize across environments and goals. A model trained using the presented approach won the Full Deathmatch track of the Visual Doom AI Competition, which was held in previously unseen environments.", "keywords": []}, "meta": {"decision": "Accept (Oral)", "comment": "This paper details the approach that won the VizDoom competition - an on-policy reinforcement learning approach that predicts auxiliary variables, uses intrinsic motivation, and is a special case of a universal value function. The approach is a collection of different methods, but it yields impressive empirical results, and it is a clear, well-written paper."}, "review": {"ryBEetBLg": {"type": "rebuttal", "replyto": "rJLS7qKel", "comment": "We thank the reviewers for their work and their comments. The reviews will help in further improving the paper. Some specific responses to individual reviewers are below.\n\n\nAnonReviewer1:\n\nThank you, we will further polish up the notation and the tables based on your suggestions.\n\n\nAnonReviewer2:\n\nWe used a very small replay buffer (2,500 frames per actor thread, 20,000 frames in total), and have not observed any significant changes in results when making it smaller or larger. This indicates that in practice the algorithm is not constrained to strict on-policy training. We will discuss this in more detail in the paper.\n\nWe agree that measurements that can be used for future prediction are not always available. (For example, as mentioned in the introduction, board games are an extreme example in which only a sparse scalar reward is provided.) We will further emphasize this in the paper to remind the reader that the presented approach adopts different modeling assumptions from most approaches in the literature.\n\n\nAnonReviewer3:\n\nThe simplicity of our model leads to several failure modes: the agent acts purely reactively, cannot construct a persistent representation of its environment (e.g., a cognitive map), and cannot plan its actions far into the future. For this reason its performance in Doom is at the level of a very inexperienced human player. Much exciting work remains to be done.\n\nWe are interested in sensorimotor control in immersive environments and chose Doom for this reason. We are looking forward to testing and further developing the approach in other simulators that are becoming available, such as DeepMind's new Lab.", "title": "Response to reviewers"}, "HkA_jbUXx": {"type": "rebuttal", "replyto": "rkvwg67Xl", "comment": "(1) The model is trained exactly as shown in the figure: both streams are trained jointly in such a way that the sum of their outputs approximates the target values. The training objective is given in equation (4). The separate training you described is hardly possible, since the only available training signal are the actual targets (that is, future measurements). Separate targets for the two streams are not available. Indeed, computing such a target for the expectation stream would require averaging future measurement values over all possible futures given a fixed current state, which is impossible to compute in realistic scenarios.\n\n(2) It will be easier to understand the approach if you do not think about the traditional notion of reward. Instead, think first about training the model to predict future measurements. Here the loss is equally distributed over all measurements and time steps. The model is trained to predict all measurements at all time steps specified in Appendix B. There is no temporal weighting (equation (4)). Now think about selecting the action at test time. Here different time steps can be prioritized via the goal vector (equation (3)). For example, for D3 and D4 we use a goal vector that only assigns non-zero weights to the farthest time step (t+32).\n\n(3) One of the main ideas of our approach is that the model predicts the future measurements f, and this prediction vector can then be flexibly combined with arbitrary goal vector g to form a test-time objective function g^T f . We call g a goal vector because it specifies the objective or, in other words, the goal of the agent. It is not the goal in the sense \u201ca specific location in space to be reached\u201d, but rather a certain general objective of the agent. Intuitively, the goal vector specifies how much to value each of the future measurements. For example, assume that the future measurements being predicted are (ammo, health, frags) 32 time steps in the future. Then g=(0,1,0) will specify the goal of maximizing health, while g=(-1,0,0) will specify the goal of pointlessly wasting ammo. In this way the system need not be limited to a single goal, and goals can be flexibly changed at test time, potentially as a reaction to the environment, other agents, a separate motivation module, etc.\n\nConcerning g also being an input of the network. In our model the behavior of the agent is defined by its goal vector g, since the actions are selected by maximizing g^T f. In order to allow the predictor to generalize to a variety of behaviors we condition the predictor on the goal vector. Intuitively, instead of predicting \u201cin 32 steps I will have 50 health points\u201d, the model predicts \u201cif I act according to goal vector (1,0,0), then in 32 steps I will have 75 health points\u201d. The conditioning is done by simply feeding the goal vector as one of the inputs to the network.", "title": "Re: Meaning for reward, goal setting"}, "rkvwg67Xl": {"type": "rebuttal", "replyto": "rJLS7qKel", "comment": "It's interesting to see that by purely using predictions over the differences between measurements for future step(s) and the presented step, the learning performance could surpass A3C and DSR in Doom. I have the following questions:\n\n(1) In Figure 1, why there is a \"Target f\" drawn to the right of \"Prediction P\"? Though this makes the model looks more end-to-end, I guess the \"Expectation\" component and \"Action\" component are updating their parameters according to their own regression losses, instead of back-propagating through a unified end. \n\n(2) The reward formulation in this work is similar to Monte-Carlo methods. In this work, the cumulative reward is represented by summing up the outputs of expectation stream and action stream *over each time steps*. If only those over the last time step is considered, it will become almost same as Monte-Carlo. However, the presented work accumulates the difference over multiple future steps. Based on the proposed form of *f* (in Section 3), the reward collected by near-future steps are weighted more. Or we could see the weight to be interpreted as linearly decaying based on the time distance from the future step to the current step. If this is the case, re-formulating the proposed approach with linearly discounted Monte-Carlo could be possible. You may also compare such Monte-Carlo as a compelling baseline. Also, it's better to put more discussion over your reward formulation, since it contributes a lot to the performance improvement and it's better to let people understand why it works well. \n\n(3) I don't quite understand what is the meaning of *goal*. In Section 3, *g* is proposed to be of the same dimension as  *f*. The maximization is over g^T*f, but what the architecture try to regress is over f, and g is designed as part of inputs to the deep neural network. And action-selection is over the maximum of summed E and A over all future steps. In this way, what the agent is trying to do is to maximize the future gain over those measurements, instead of performing according to the specified goal. Hope the authors could clarify on this.\n\n\n", "title": "Meaning for reward,  goal setting"}, "BJWKBWzXe": {"type": "rebuttal", "replyto": "BJaWZGCGl", "comment": "We have uploaded a revision that relates our work in more detail to UVFA (Schaul et al., 2015). The modified text is at the end of the first paragraph on page 3. Our model is indeed related to the general family of models described by Schaul et al. However, the specifics are important.\n\nSchaul et al. present a very general framework, but none of its specific instantiations appear to have the effectiveness of our model. The closest instantiation presented by Schaul et al. is in Section 5.3 of their paper, yet it is only evaluated on a discrete grid-world with manually identified grid cells as goals (Figure 11). Furthermore, the authors report that training their model with function approximation is unstable and resort to a heuristic. In general, Schaul et al. use different locations in their 2D environments as goals. The locations essentially serve as \u201cbeacons\u201d placed by the designers in the environments. The goals do not emerge naturally and do not appear to be intrinsic to the agents.\n\nIn our work, goals are defined in terms of intrinsic measurements and control is based on direct prediction of future measurements. We provide a specific network architecture that handles realistic sensory and measurement streams (Figure 1 in our paper), to which there is no analogue in the work of Schaul et al. We show that this architecture trains extremely effectively. And we provide extensive experiments and results in immersive environments, to which there is also no analogue in the prior work.\n\nConcerning DSR, we used the code provided by the authors, spent time analyzing the code and attempting to speed it up, and corresponded with the authors to facilitate these attempts. Regarding the autoencoder specifically, it is presented in the technical report of Kulkarni et al. (2016b) as an integral component of the approach. During our correspondence, the lead author of the technical report wrote \u201cI do have an autoencoder loss, which does slow down the training significantly. That is currently my least favorite part of DSR and I am actively trying to change that to make DSR more scalable.\u201d This indicates that removing the autoencoder is not trivial, since the lead author himself is trying to do this but hasn\u2019t yet succeeded.", "title": "Authors' response to AnonReviewer3"}, "HJSqEWf7g": {"type": "rebuttal", "replyto": "SJJYPkCfl", "comment": "Regarding \u201cadditional information\u201d, note that all approaches were trained with the same weighting of ammo, health, and frags. That is, \u201chow much to relatively value ammo, health, frags\u201d (e.g., (0.5,0.5,1)) was provided in an identical form to both the presented approach and all of the baselines. This is stated at the bottom of page 6 and in Appendix C.\n\nBy \u201clearning the goals\u201d do you mean having measurements and a separate reward, and learning to express the reward via measurements? We have not tried this, but it is an interesting suggestion. It seems that in the case of goals being linear combinations of measurements it would be almost trivial, but in more complicated settings it can be interesting.\n\nMore broadly, note that the ability to change goals at test time is a key characteristic of the approach. It opens the possibility of using the model as part of a larger system in which goals are set dynamically by other modules, for example in response to interaction with other agents. Exposing the goal vector as part of the external interface of the model is thus deliberate.", "title": "Authors' response to AnonReviewer2"}, "BJaWZGCGl": {"type": "review", "replyto": "rJLS7qKel", "review": "- I would like the authors to relate formulations proposed in (1,2,3) to previous RL literature and models, and then adjust the claims. This approach could be crudely categorized as a UVFA (universal value function appx, Schaul et al) model trained with an on-policy method.\n\n- In order to make the comparisons with DSR fair, DSR could be learnt without the autoencoder loss (although the original DSR paper does make use of this loss throughout the paper)\nThis paper presents an on-policy deep RL method with additional auxiliary intrinsic variables. \n\n- The method is a special case of an universal value function based approach and the authors do cite the correct references. Maybe the biggest claimed technical contribution of this paper is to distill many of the existing ideas to solve 3D navigation problems. I think the contributions should be more clearly stated in the abstract/intro\n\n- I would have liked to see failure modes of this approach. Under what circumstances does the model have problems generalizing to changing goals? There are other conceptual problems -- since this is an on-policy method, there will be catastrophic forgetting if the agent dosen't repeatedly train on goals from the distant past. \n\n- Since the main contribution of this paper is to integrate several key ideas and show empirical advantage, I would have liked to see results on other domains like Atari (maybe using the ROM as intrinsic variables)\n\nOverall, I think this paper does show clear empirical advantage of using the proposed underlying formulations and experimental insights from this paper might be valuable for future agents", "title": "comparisons", "rating": "8: Top 50% of accepted papers, clear accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "ryVinjW4g": {"type": "review", "replyto": "rJLS7qKel", "review": "- I would like the authors to relate formulations proposed in (1,2,3) to previous RL literature and models, and then adjust the claims. This approach could be crudely categorized as a UVFA (universal value function appx, Schaul et al) model trained with an on-policy method.\n\n- In order to make the comparisons with DSR fair, DSR could be learnt without the autoencoder loss (although the original DSR paper does make use of this loss throughout the paper)\nThis paper presents an on-policy deep RL method with additional auxiliary intrinsic variables. \n\n- The method is a special case of an universal value function based approach and the authors do cite the correct references. Maybe the biggest claimed technical contribution of this paper is to distill many of the existing ideas to solve 3D navigation problems. I think the contributions should be more clearly stated in the abstract/intro\n\n- I would have liked to see failure modes of this approach. Under what circumstances does the model have problems generalizing to changing goals? There are other conceptual problems -- since this is an on-policy method, there will be catastrophic forgetting if the agent dosen't repeatedly train on goals from the distant past. \n\n- Since the main contribution of this paper is to integrate several key ideas and show empirical advantage, I would have liked to see results on other domains like Atari (maybe using the ROM as intrinsic variables)\n\nOverall, I think this paper does show clear empirical advantage of using the proposed underlying formulations and experimental insights from this paper might be valuable for future agents", "title": "comparisons", "rating": "8: Top 50% of accepted papers, clear accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "SJJYPkCfl": {"type": "review", "replyto": "rJLS7qKel", "review": "The goal is always given to the agent, never learned. Is that correct? So it seems like this is providing additional information that other models didn't receive about the decomposition of the reward function (e.g. how much to relatively value ammo, health, frags).\n\nHave you tried learning the goal?Deep RL (using deep neural networks for function approximators in RL algorithms) have had a number of successes solving RL in large state spaces. This empirically driven work builds on these approaches. It introduces a new algorithm which performs better in novel 3D environments from raw sensory data and allows better generalization across goals and environments. Notably, this algorithm was the winner of the Visual Doom AI competition.\n\nThe key idea of their algorithm is to use additional low-dimensional observations (such as ammo or health which is provided by the game engine) as a supervised target for prediction. Importantly, this prediction is conditioned on a goal vector (which is given, not learned) and the current action. Once trained the optimal action for the current state can be chosen as the action that maximises the predicted outcome according the goal. Unlike in successor feature representations, learning is supervised and there is no TD relationship between the predictions of the current state and the next state.\n\nThere have been a number of prior works both in predicting future states as part of RL and goal driven function approximators which the authors review in section 2. The key contributions of this work are the focus on Monte Carlo estimation (rather than TD), the use of low-dimensional \u2018measurements\u2019 for prediction, the parametrized goals and, perhaps most importantly, the empirical comparison to relevant prior work.\n\nIn addition to the comparison with Visual Doom AI, the authors show that their algorithm is able to learn generalizable policies which can respond, without further training, to limited changes in the goal.\n\nThe paper is well-communicated and the empirical results compelling and will be of significant interest.\n\nSome minor potential improvements:\nThere is an approximation in the supervised training as it is making an on-policy assumption but it learns from a replay buffer (with the Monte Carlo regression the expectation of the remainder of the trajectory is assumed to follow the current policy, but is being sampled from episodes generated by prior versions of the policy). This should be discussed.\nThe algorithm uses additional metadata (the information about which parts of the sensory input are worth predicting) that the compared algorithms do not. I think this, and the limitations of this approach (e.g. it may not work well in a sensory environment if such measurements are not provided) should be mentioned more clearly.\n\n", "title": "Goals", "rating": "7: Good paper, accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "BJvWS_GVg": {"type": "review", "replyto": "rJLS7qKel", "review": "The goal is always given to the agent, never learned. Is that correct? So it seems like this is providing additional information that other models didn't receive about the decomposition of the reward function (e.g. how much to relatively value ammo, health, frags).\n\nHave you tried learning the goal?Deep RL (using deep neural networks for function approximators in RL algorithms) have had a number of successes solving RL in large state spaces. This empirically driven work builds on these approaches. It introduces a new algorithm which performs better in novel 3D environments from raw sensory data and allows better generalization across goals and environments. Notably, this algorithm was the winner of the Visual Doom AI competition.\n\nThe key idea of their algorithm is to use additional low-dimensional observations (such as ammo or health which is provided by the game engine) as a supervised target for prediction. Importantly, this prediction is conditioned on a goal vector (which is given, not learned) and the current action. Once trained the optimal action for the current state can be chosen as the action that maximises the predicted outcome according the goal. Unlike in successor feature representations, learning is supervised and there is no TD relationship between the predictions of the current state and the next state.\n\nThere have been a number of prior works both in predicting future states as part of RL and goal driven function approximators which the authors review in section 2. The key contributions of this work are the focus on Monte Carlo estimation (rather than TD), the use of low-dimensional \u2018measurements\u2019 for prediction, the parametrized goals and, perhaps most importantly, the empirical comparison to relevant prior work.\n\nIn addition to the comparison with Visual Doom AI, the authors show that their algorithm is able to learn generalizable policies which can respond, without further training, to limited changes in the goal.\n\nThe paper is well-communicated and the empirical results compelling and will be of significant interest.\n\nSome minor potential improvements:\nThere is an approximation in the supervised training as it is making an on-policy assumption but it learns from a replay buffer (with the Monte Carlo regression the expectation of the remainder of the trajectory is assumed to follow the current policy, but is being sampled from episodes generated by prior versions of the policy). This should be discussed.\nThe algorithm uses additional metadata (the information about which parts of the sensory input are worth predicting) that the compared algorithms do not. I think this, and the limitations of this approach (e.g. it may not work well in a sensory environment if such measurements are not provided) should be mentioned more clearly.\n\n", "title": "Goals", "rating": "7: Good paper, accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}}}