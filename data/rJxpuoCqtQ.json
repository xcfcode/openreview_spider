{"paper": {"title": "Likelihood-based Permutation Invariant Loss Function for Probability Distributions", "authors": ["Masataro Asai"], "authorids": ["masataro.asai@ibm.com"], "summary": "The proposed method, Set Cross Entropy, measures the information-theoretic similarity of sets in a permutation-invariant manner.", "abstract": "We propose a permutation-invariant loss function designed for the neural networks reconstructing a set of elements without considering the order within its vector representation. Unlike popular approaches for encoding and decoding a set, our work does not rely on a carefully engineered network topology nor by any additional sequential algorithm. The proposed method, Set Cross Entropy, has a natural information-theoretic interpretation and is related to the metrics defined for sets. We evaluate the proposed approach in two object reconstruction tasks and a rule learning task.", "keywords": ["Set reconstruction", "maximum likelihood", "permutation invariance"]}, "meta": {"decision": "Reject", "comment": "This paper proposes a new permutation invariant loss (where the order doesn't matter), motivated by set autoencoding settings. This is an important problem, and the authors' solution is interesting.  The reviewers, however, found the exposition to be unclear, in particular the explanation on how the loss function is derived was confusing for two of the reviewers. Reviewers also found the experimental results to be not convincing, even after the revision. This is a borderline paper: the idea is valuable and I'd encourage the authors to develop it further, improving exposition and including additional experiments as suggested by the reviewers.\n"}, "review": {"H1gg6JZ9RX": {"type": "rebuttal", "replyto": "SyeTgUjt0Q", "comment": "It is unclear why the reviewer believe that they are \"still running\".\n\nIt seems that the reviewer is requesting to include all planning results in the paper, which greatly increases the paper length , but we updated the paper to satisfy that anyways.\n\nPlease check the revised paper, where all visualized results are added in Section 6.6.\n", "title": "All experiments are finished"}, "rJe3Vj9tA7": {"type": "rebuttal", "replyto": "S1xEuWr4AX", "comment": "Please check the updated paper for the additional results.", "title": "Paper updated"}, "rkxXX1XYRm": {"type": "rebuttal", "replyto": "S1xEuWr4AX", "comment": "  > I still think that evaluating the quality of representations learnt\n    with an SCE loss is not a very surprising thing to ask for.\n\n  To address the reviewer's request, we are running a new experiment. We\n  modified Latplan (Asai, Fukunaga AAAI18) neural-symbolic classical\n  planning system, a system that operates on a discrete symbolic latent\n  space of the real-valued inputs and runs dijkstra/A* search using a\n  state-of-the-art symbolic classical planning solver. We modified\n  Latplan to take the set-of-object-feature-vector input rather than\n  images.  It is a high-level task planner (unlike motion planning /\n  actuator control) that has implications on robotic systems.\n\n  To briefly describe the Latplan system, it learns the discrete binary\n  latent space of an arbitrary raw input (e.g. images) with a\n  Gumbel-Softmax variational autoencoder, learns a discrete transition\n  model in the state space from the transition examples, and runs a\n  systematic, complete search algorithm such as Dijkstra search or A*\n  which gurantee the optimality of the solution.  Unlike RL-based\n  planning systems, the search agent does not contain the learning\n  aspects.  The discrete plan in the latent space is mapped back to the\n  raw image visualization of the plan execution.  A similar system\n  replacing Gumbel Softmax VAE with Causal InfoGAN was later proposed\n  (Kurutach et. al., NIPS18).\n\n  We replaced Latplan's Gumbel-Softmax VAE with our autoencoder used in\n  the 8-Puzzle and the Blocksworld experiments (Appendix, Sec 6.1). Our\n  autoencoder also uses Gumbel Softmax in the latent layer, but it uses\n  (Zaheer 2017) encoder and is trained with Set Cross Entropy in order\n  to encode permutation-invariant information.\n\n  When the network learned the representation, it guarantees that the\n  planner finds a solution because the search algorithm being used\n  (e.g. Dijkstra) is a complete, systematic, symbolic search algorithm,\n  which guarantees to find a solution whenever it is reachable in the\n  state space.  If the network cannot learn the permutation-invariant\n  representation, the system cannot solve the problem and/or return the\n  human-comprehensive visualization. This makes the specific\n  permutation-invariant representation using (Zaheer 2017) and the\n  proposed Set Cross Entropy necessary when the input is given as a set\n  of feature vectors.\n\n  The new results will be found in the appendix section of the revision.\n  The reason for putting it in the appendix is that the value of the new\n  experiment added to our main contribution could be debatable.\n  Our MAIN claim is a loss function that can train a NN to reconstruct a\n  set, and the importance of better handling a set in the context of\n  deep learning is already widely recognized in the ML community (see\n  the existing work cited by our paper).\n", "title": "Planning with Plannable Representation, i.e., Discrete Latent Binary Representation + Latplan system (AAAI18)"}, "H1ezDoAkCQ": {"type": "rebuttal", "replyto": "BkgusNjaam", "comment": "  Thank you for the further comments.\n\n  Getting back to the first comment,\n\n  > The logsumexp formulation of the proposed measure is unsatisfactory\n  > to me as it directly averages over each of the independent\n  > probabilities that a given element is a member of the target set,\n  > rather than integrating over the combinatorial set of probabilities\n  > for each set of complete possible matches.\n\n  Since every sets have the equal number of permutations (assuming they\n  are of the same size and every elements are distinct), the individual\n  probability and such an integrated sum over every permutations of the\n  probabilities will only differ by a constant factor scaling.\n\n  For example, P([x,y,z]=[1,2,3]) vs sum of all permutations,\n  P([x,y,z]=[1,2,3])+\u2026+P([x,y,z]=[3,2,1]) differs by 6, the number of\n  permutations for 3 elements.  Since other patterns, such as\n  P([x,y,z]=[4,5,6]), also have 6 permutations, considering just one\n  ordering and considering all ordering makes essentially no difference.\n\n  Informally speaking, the key to understand our method is to notice\n  that considering the exponential/combinatorial number of possible\n  permutations (matches) is equivalent to treating every permutation as\n  a distinct event, which is not necessary when the output order is\n  ignored.  It is not something that is asked for in this\n  problem setting.\n", "title": "reply"}, "BJlQWHaL67": {"type": "rebuttal", "replyto": "S1lS16Ohsm", "comment": "\n  > only sets of equal size are under consideration ...\n\n  See the overall reply. It is not only for sets of equal size.\n\n\n  > The logsumexp formulation of the proposed measure is unsatisfactory\n  > to me as it directly averages over each of the independent\n  > probabilities that a given element is a member of the target set,\n  > rather than integrating over the combinatorial set of probabilities\n  > for each set of complete possible matches.\n\n  We have shown (the proof in page.3, sec.3, par.7) that our method\n  guarantees that, at the global minima, every element x of the dataset\n  X is matched by some element y of the output Y exactly once, just as\n  in Hausdorff measure.\n\n  We would like to hear more details about why it is unsatisfactory despite the guarantee.\n\n  > The definition of the Hausdorff distance given is directional and is\n  > therefore not a metric, contrary to what is stated on page 2.\n\n  We already clarified this in page 2: \"Note that, in this work, we use\n  the informal usage of the terms \u201cdistance\u201d or \u201cmetric\u201d ...\"  We\n  also only stated that Hausdorff distance is a metric, and not that the\n  directed Hausdorff distance is a metric.  We moved the clarification\n  to the beginning of the section to avoid confusion.\n\n  > the space [0,1]^NxF is described as binary...\n\n  See the overall reply. [0,1] is a closed set of reals, not discrete\n  values.  The input is not assumed to be discrete. \"binomial\n  distribution\" might be the more appropriate term. We rephrased them in the revision.\n\n  > what is the objective of each task and what are the 'ingredients' we\n    begin with.\n\n  The detailed descriptions are in the appendix.  The first two tasks (8\n  puzzle, Blocksworld) are the autoencoding task, but without\n  considering the ordering in the first axis of the data point (i.e. the order of the elements).\n  In 8-puzzle, the object representation (an element of the set) is\n  hand-crafted as in Fig.1.  In Blocksworld, a set of objects are\n  extracted from the image, and the image patch and the bounding box\n  information are compressed into 1224-D vector by a feature engineering\n  using Conv-AE (Appendix, 6.3).\n\n  The last task (rule learning task) is to predict a set of terms from a\n  single term, where each term is a n-hot vector representing a\n  first-order logic term (Section 4.2, Appendix 6.4).  We moved the\n  description in the appendix to the main text.\n", "title": "reply"}, "r1g0z4pU6m": {"type": "rebuttal", "replyto": "SklYVU2hs7", "comment": "  > The use of log likelihoods to metrize distances between sets,\n    although not new, ...\n\n  Log likelihood itself is a general notion and is not new.  However,\n  our contribution is formulating the log likelihood for sets, with a\n  proof that it converges to the correct answer at the global minima.\n\n  > The question of comparing sets of different sample sizes would be a\n  > valuable extension to the work.\n\n  See the overall reply. We added some explanations and also a\n  new experiment that shows that it can model the sets with the different number of elements.\n", "title": "Overall comment"}, "BygnoGpIpX": {"type": "rebuttal", "replyto": "HJglfr-CiQ", "comment": "  > Actually, I\u2019ve never seen cross entropy written with P(x=y).\n\n  The usual notation of the probability distribution, such as P(x), is\n  an abbreviation of a random variable X taking a particular value x,\n  i.e. P(X=x), following the notation in Ian Goodfellow's Deep Learning\n  textbook, chap.3\n  ([http://www.deeplearningbook.org/contents/prob.html]). We just kept\n  it expanded for denoting the cross entropy.\n\n  > The phrase \u201cThe purpose of this experiment is to reproduce the\n  > results from (Zaheer et al., 2017)\u201d makes little sense to me.\n  > In Deep Sets, there are many experiments and it\u2019s not clear which\n  > experiment is meant here.\n\n  By \"reproduce\" we did not mean we run the same experiment in the prior\n  work; What we did is that we confirmed their general claim (their\n  particular network structure is able to encode an input in a\n  permutation invariant manner) in *our* experimental setting.\n\n  We rephrased it in the revision in order to avoid the confusion.\n\n  > Table 1 gives test error statistics for 10 runs. What is changed in\n    every run?\n\n  The purpose of running the experiments 10 times is to address the\n  potential concern about the stability of the training.\n\n  We kept the same set of training/testing data, the only difference is\n  the random seed.  In one of the 10 runs, A1H (set average pseudo\n  metric) did not converge, showing that the A1H (baseline) could be\n  unstable, possibly due to the issue explained in the example at the\n  end of section 3. # , though this is a speculation from the empirical\n  result.  This shows another empirical evidence that our proposed\n  method is superior.  We clarified these points in the revision.\n\n  > Blocksworld: the reconstructions are nice, but the numbers in Table\n    2 are difficult to interpret.\n\n  We agree with this point. To address it, we added the RMSE between the\n  visualized pictures to give more insights.  Note that these pictures\n  are not the direct output of the neural network; However, comparing\n  the reconstructed pictures by RMSE should give some intuitive sense\n  since the error directly translates to the pixel value.  A new table\n  is added in the revision.\n\n  Furthermore, we compared the visualized results between the networks\n  trained with a different loss formulation.\n\n  Since we believe the same issue applies to 8-puzzles, we also added a\n  new evaluation metric for 8-puzzles: Since we know 8 puzzle feature\n  vectors are discrete (a domain knowledge, not the assumption in our\n  proposed method), we can directly compare the output reconstruction\n  with the input by rounding the continuous output to 0/1 and comparing\n  whether all elements are correctly reconstructed, and count the rate\n  of the successful reconstructions across the dataset.  Another new\n  table is added in the revision.\n\n  > Rule learning ILP tasks: the concept of 10 runs is still unclear.\n\n  This is same as the previous experiments; The only difference is the\n  random seed.\n\n  > I think an important goal of any autoencoder is to learn a\n  > representation that can be useful in other tasks. There is even an\n  > example in the paper: \u201cset representation of the environment is\n  > crucial in the robotic systems\u201d. Thus, the experiments I would like\n  > to see are about evaluating the quality of a representation from an\n  > SCE-trained autoencoder compared to other training methods.\n  > Without those experiments, I cannot estimate how valuable the SCE\n  > loss function is.\n\n  We were surprised by this question.\n\n  First, we do not focus only on the autoencoding task. In the ILP task,\n  the neural network learns to predict a set from the single\n  element. For example, in the last `neighbor5` experiment in Table 6,\n  the task is to predict 5 elements from 1 element.  Our contribution is\n  the method for training a NN to output a set, not limited\n  to autoencoding.\n\n  Regarding the value of reconstructing a set, existing work (Vinyal\n  NIPS 2015, ICLR 2016) already showed that once we can train a NN to\n  output a set (by whatever means), it allows a variety of tasks to be\n  solved.  The problem is that existing methods relied on an ad-hoc\n  preprocessing and/or a careful tuning that depends on the domain\n  knowledge, or a sequential process such as Gale-Shapley.\n  Our contribution is to completely remove these assumptions motivated\n  by the theoretical formulation, NOT by an empirical success\n  that may occur by chance in a particualr problem setting.\n", "title": "Overall reply"}, "rkxJ7-a8a7": {"type": "rebuttal", "replyto": "rJxpuoCqtQ", "comment": "Thanks very much for the thoughtful comments.  We first discuss the\ngeneral response to the reviewers, then in the threads we reply to the\nspecific concerns raised by each reviewer.\n\nWhile ICLR may not mandate it, we would appreciate it if you confirm in\nthe reply that you read all of the rebuttals, including the replies to\nthe other reviewers.\n\nTo Reviewer #1 and #3:\n\nThe input is *not* assumed to be discrete.  [0,1] is meant to be a\nclosed set of reals between 0 and 1 (while an open set is denoted as\n(0,1)).  We clarified this in the revision.  By \"binary representation\"\nin page 3, we meant a binomial probability distribution (thus can be a\ncontinuous value) in contrast to the multinomial\nprobability distribution.\n\nIn fact, each input feature vector in the Blocksworld experiment are\ngenerated from the individual image patches by an additional autoencoder\nwith a sigmoid latent activation (Appendix 6.3, Figure 4), thus they are\nin fact the continuous vectors.\n\nTo Reviewer #2 and #3:\n\n> #2 The question of comparing sets of different sample sizes would be a\n> valuable extension to the work.\n\n> #3 only sets of equal size are under consideration ...\n\n(Sec 3, paragraph 3) When the size of the set varies, we can add an\narbitrary number of artificially generated distinct dummy elements to\nthe set in order to keep the size of the set equal throughout\nthe dataset.\n\nFor example, when there is a set of N objects of F features and we want\nto normalize the size of the set to N' (>N), one way is to add an\nadditional axis to the feature vector (F+1 features) where the\nadditional F+1-th feature is 0 for the real data and 1 for the dummy\ndata, and the distinct N'-N objects are generated in an arbitrary way\n(e.g. as a binary sequence 100000, 100001, 100010, 100011, ... for F=5).\nDuring the inference, the dummy vectors in the output can be removed.\n\nWe added this explanation in the revision.\n\nThe ability to learn from such an augmented dataset is only a matter of\nthe neural network topology and the hyperparameter tuning, which is not\nthe main topic of this paper.  Whether using an LSTM, a CNN or a fully\nconnected network does not affect the loss formulation presented in this\nwork.  Given enough capability for tuning and network engineering (which\nincludes the choise of NN), they should also be able to learn from such\nan augmented dataset, as the augmented dataset has the\nsame characteristics.\n\nHowever, to address this concern, we ran an additional experiment where\nsome of the tiles are randomly missing in 8 puzzles.  The feature\nvectors are extended from 15 to 16 dimensions and the dummy elements are\ninserted as explained above.  The system reconstructs the elements\nincluding the dummy ones, which means it can identify how many and which\nelements are missing for the given augmented output. Moreover, the\nproposed Set Cross Entropy outperformed Set Average and other loss\nfunctions.  See Section 4.1 for the additional details and the results.\n\nFinally, we noticed that the evaluation metric for the\nILP task was not explained properly; Originally, we wrote:\n\n> We counted the ratio of the clauses across the test set where every\n  output term matches against one of the body terms.\n\nThis is wrong: It is an improper way to measure the correct matching, as\nthere could be duplicates.  Our implementation did not measured the\nsuccess rate in this way.  The correct description that reflects our\nimplementation is:\n\n> We counted the ratio of the clauses across the test set where every\n  *body* term matches against one of the *output* terms.\n\n", "title": "Overall reply to all reviewers"}, "HJglfr-CiQ": {"type": "review", "replyto": "rJxpuoCqtQ", "review": "This paper proposes an objective function for sets autoencoders such that the loss is permutation invariant with respect to the order of reconstructed inputs. I think that the problem of autoencoding sets is important and designing custom loss functions is a good way to approach it. Thus, I quite like the idea of SCE  from that point of view. However, I find the experiments not convincing for me to accept the paper. \n\nWhile reading Section 3, I found it hard to keep in mind that x and y are discrete probability distributions and the notation like P(x=y) is not making things easier. Actually, I\u2019ve never seen cross entropy written with P(x=y). Though is my personal opinion and I don\u2019t have a suggestion on how to improve the explanations in Eq. 1-8. However, I\u2019m glad there is an example at the end of Section 3.\n\nI have some comments on the Experiments section. \n\n* Puzzles:\n(1) Figure 1 could have been prettier. \n(2) The phrase \u201cThe purpose of this experiment is to reproduce the results from (Zaheer et al., 2017)\u201d makes little sense to me.  In Deep Sets, there are many experiments and it\u2019s not clear which experiment is meant here.\n(3) Table 1 gives test error statistics for 10 runs. What is changed in every run? Does the test set stay the same in every run or is a kind of a cross-validation? Or is it just a different random seed for the initial weights? I could not find an explanation in the text, so there is no way I can interpret the results.\n\n* Blocksworld: the reconstructions are nice, but the numbers in Table 2 are difficult to interpret. \nFor example, I cannot estimate how important the difference of 10 points in SH scores is.\n\n* Rule learning ILP tasks: I don\u2019t know enough about learning logic rules tasks to comment on those experiments, but Table 3 seems overwhelming and the concept of 10 runs is still unclear.\n\n--- General comment on the experiments ---\n\nI think an important goal of any autoencoder is to learn a representation that can be useful in other tasks. There is even an example in the paper: \u201cset representation of the environment is crucial in the robotic systems\u201d. Thus, the experiments I would like to see are about evaluating the quality of a representation from an SCE-trained autoencoder compared to other training methods.  Without those experiments, I cannot estimate how valuable the SCE loss function is.  ", "title": "new loss function for set autoencoders; experiments are not sufficient", "rating": "5: Marginally below acceptance threshold", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "SklYVU2hs7": {"type": "review", "replyto": "rJxpuoCqtQ", "review": "The paper is understandable and the question addressed is interesting. The use of log likelihoods to metrize distances between sets, although not new, is used quite effectively to address the issue of label switching in sets. Although the run time is O(N^2), the metric can be computed in a parallelized manner. The question of comparing sets of different sample sizes would be a valuable extension to the work. Although I think the proposed loss function addresses some important issues, would like to defer the question of acceptance/rejection to other reviewers due to lack of expertise in related areas.", "title": "Extension to case of sets with different sample sizes?", "rating": "6: Marginally above acceptance threshold", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "S1lS16Ohsm": {"type": "review", "replyto": "rJxpuoCqtQ", "review": "In the manuscript entitled \"Likelihood-based Permutation Invariant Loss Function for Probability Distributions\" the authors propose a loss function for training against instances in which ordering within the data vector is unimportant.  I do not find the proposed loss function to be well motivated, find a number of confusing points (errors?) in the manuscript, and do not easily follow what was done in the examples.\n\nFirst, it should be noted that this is a very restricted consideration of what it means to compare two sets since only sets of equal size are under consideration; this is fundamentally different to the ambitions of e.g. the Hausdorff measure as used in analysis.  The logsumexp formulation of the proposed measure is unsatisfactory to me as it directly averages over each of the independent probabilities that a given element is a member of the target set, rather than integrating over the combinatorial set of probabilities for each set of complete possible matches.  Moreover, the loss function H() is not necessarily representative of a generative distribution.\n\nThe definition of the Hausdorff distance given is directional and is therefore not a metric, contrary to what is stated on page 2.\n\nI find the description of the problem domain confusing on page 3: the space [0,1]^NxF is described as binary, but then values of log y_i and log (1-y_i) are computed with y in [0,1] so we must imagine these are in fact elements in the open set of reals: (0,1).\n\nClarity of the examples could be greatly improved, in particular by explaining precisely what is the objective of each task and what are the 'ingredients' we begin with.", "title": "Lacks clarity", "rating": "4: Ok but not good enough - rejection", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}}}