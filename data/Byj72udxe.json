{"paper": {"title": "Pointer Sentinel Mixture Models", "authors": ["Stephen Merity", "Caiming Xiong", "James Bradbury", "Richard Socher"], "authorids": ["smerity@salesforce.com", "cxiong@salesforce.com", "james.bradbury@salesforce.com", "rsocher@salesforce.com"], "summary": "Pointer sentinel mixture models provide a method to combine a traditional vocabulary softmax with a pointer network, providing state of the art results in language modeling on PTB and the newly introduced WikiText with few extra parameters.", "abstract": "Recent neural network sequence models with softmax classifiers have achieved their best language modeling performance only with very large hidden states and large vocabularies. Even then they struggle to predict rare or unseen words even if the context makes the prediction unambiguous. We introduce the pointer sentinel mixture architecture for neural sequence models which has the ability to either reproduce a word from the recent context or produce a word from a standard softmax classifier. Our pointer sentinel-LSTM model achieves state of the art language modeling performance on the Penn Treebank (70.9 perplexity) while using far fewer parameters than a standard softmax LSTM. In order to evaluate how well language models can exploit longer contexts and deal with more realistic vocabularies and corpora we also introduce the freely available WikiText corpus.", "keywords": ["Natural language processing", "Deep learning"]}, "meta": {"decision": "Accept (Poster)", "comment": "The reviewers liked this paper quite a bit, and so for this reason it is a perfectly fine paper to accept. However, it should be noted that the area chair was less enthusiastic. The area chairs mentions that the model appears to be an extension of Gulcehre et al. and the Penn Treebank perplexity experiments are too small scale to be taken seriously in 2017. Instead of experimenting on other known large-scale language modeling setups, the authors introduce their own new dataset (which is 1 order of magnitude smaller than the 1-Billion LM dataset by Chelba et al). The new dataset might be a good idea, but the area chair doesn't understand why the authors do not run public available systems as baselines. This should have been fairly easy to do and would have significantly strengthen the result of this work. The PCs thus encourage to authors to take into account this feedback and consider updating their paper accordingly."}, "review": {"SkWBnKLUe": {"type": "rebuttal", "replyto": "S1PEjF8Lx", "comment": "Apologies, the above post is mine, though I accidentally posted it while not logged in, resulting in an anonymously authored comment.\n\nAs noted, we hope the above discussion has answered your queries. If you have any further questions, feel free to post them and we will attend to them as quickly and clearly as possible!\n\nP.S. I forgot to explicitly note that the Hutter Prize Wikipedia (enwik8) and Text8 datasets are only ever used at the character level, not the word level, as in our current task.", "title": "Clarifying authorship of \"Response to the review\""}, "S1PEjF8Lx": {"type": "rebuttal", "replyto": "BJZyrpJBg", "comment": "Thank you for your feedback and for the chance to clarify our model and any discussions arising from it.\n\nFirst, we do not feel that this is at all a direct application of the previous work from Gulcehre et al. Both approaches investigate how to use and integrate pointer networks within various problem domains but have many differences in both implementation, theory, and experimentation. In answering some of your queries, we hope to further highlight these differences.\n\n= The Pointer Network as a Source of Information =\n\nRegarding the pointer network being used as a source of information, this is a key difference between the Gulcehre et al. method and the pointer sentinel mixture model.\n\nAs an extreme example, imagine if the pointer window changed with each timestep. In the Gulcehre et al. switching network, the switching decision must be made without any understanding of what the new composition of the pointer window is. This is as the RNN hidden state is the only source of information as to whether the vocabulary softmax or pointer network should be used.\n\nIn the pointer sentinel mixture model, the pointer window is \u201cqueried\u201d by the attentional softmax operation. If nothing of interest is found there, the probability mass falls upon the pointer sentinel. As the pointer sentinel acts in a similar capacity to the switching network, it can use the contents of the pointer window to influence whether to use the pointer network or not.\n\nAs such, the pointer sentinel mixture model actively uses the contents of the pointer window to make the switching decision while the Gulcehre et al. switching network is not able to.\n\nWhile the composition of the pointer window changes simply in language modeling, it is still a limitation. Words fall out of the pointer window over time, resulting in either mistakes when the switching network defers to the pointer network at the wrong time, or a switching network that needs to record additional \u201cbook keeping\u201d (i.e. position of words over time) and/or is overly cautious as words approach the end of the pointer window.\n\nThe switching network approach would become even more limited if the pointer window were more dynamic, such as if you removed words from the pointer window depending on an additional filtering decision. In Python code prediction, the pointer window may have external knowledge and filter to only variables or Python keywords depending on the context for example. The pointer sentinel method would easily extend to this whilst the switching network would likely become highly problematic.\n\nThis is further detailed in Section 2.5 of the paper regarding the motivation of the pointer sentinel, especially regarding long sequences of text and the limited capacity of the RNN hidden state.\n\n= Regarding the Mixture Model =\n\n\u201cThe model of Gulcehre is also a mixture model, where an MLP with sigmoid output (switching network) is used to form a mixture between softmax prediction and locations of the input text.\u201d\n\nAt training time, the Gulcehre et al. switching network decides to always use the pointer network if the target word is in the pointer window. As such, they consider these switching network variables as fully observed. For the pointer sentinel mixture model, we consider the decision of when to use the pointer network or the softmax as a latent variable, decided as part of the training of the network. This has the advantage that a target word within the pointer window may not have the correct context for the pointer network to correctly select it, while the softmax generator might.\n\nGulcehre et al. also doesn\u2019t have all the features of a mixture model. While the Gulcehre et al. switching network method produces a value d_t similar to a mixing proportion, it does not marginalize out (sum up) the final probability even though a target word may appear in both mixture components, the vocabulary softmax and the positional softmax. The target word may even appear in the positional softmax (pointer window) multiple times, with only one of these occurrences being selected.\n\nFrom Gulcehre et al., \u201c[a]t test time, we compute [the probabilities] for all shortlist word w_t and all location l_t , and pick the word or location of the highest probability\u201d.\n\nAs such, producing a prediction in the pointer sentinel method is equivalent at both train time and test time, but is instead quite different in the Gulcehre et al. method, with the training time forcing a value on what could be a latent variable and the test time taking the max value of the disparate components instead of forming a proper mixture probability density function. With the pointer sentinel method summing up the probability given to all occurrences of a target word, it also ensures that if there are multiple sources of information, all sources of information can contribute to the final decision. This ensures the final test time probability density function is a convex combination of the mixture components, which is not true of the Gulcehre et al. model due to the max operation.\n\n= WikiText compared to Text8 / Hutter =\n\nBoth the Hutter Prize and Text8 use the first 10^8 bytes of English Wikipedia. The Hutter Prize is simply the first 10^8 bytes of English Wikipedia unchanged, meaning it contains the XML of the Wikipedia pages, timestamps, contributing author usernames, Wikipedia text mark-up, Wikipedia categories, links, etc. This is not a clean dataset for use in our tasks. Text8 is a highly limited preprocessed version of the first 10^8 bytes. It only contains lowercase ASCII a-z and the space symbol, for a total vocabulary of 27 characters, converting numbers to their word equivalents. There is also no punctuation that maintains human readability of articles or many of the other characteristics of real world text.\n\nThe articles found in WikiText are specifically selected (Good and Featured articles) rather than simply those found in the first 10^8 bytes of Wikipedia. The text was normalized and tokenized using the Moses tokenizer in a manner very similar to that of text used for machine translation, with hopes that results on the WikiText dataset should be more directly applicable to such tasks. Neither of the datasets above perform similar levels of normalization or tokenization. For language modelling tasks, <unk> tags are required for many models as a standard way of handling infrequent or unseen tokens. WikiText provides the data with <unk> tags preprocessed such that results are directly comparable between different papers. WikiText-2 is approximately a tenth the size of Text8 while WikiText-103 is five times larger than Text8. Both have training, validation, and testing splits which neither of the datasets above feature. WikiText-2 and WikiText-103 are also formatted in the same manner as the Mikolov Penn Treebank dataset such that using it for experiments requires expending minimal effort, as opposed to both other datasets which are in quite raw forms.\n\n---\n\nHopefully the above discussion will have answered some of your queries and changed your view on the contributions of our paper. ", "title": "Response to the review, clarifying using the pointer as source of information, mixture model definitions, and WikiText compared to Text8 / Hutter"}, "S1GotwT7x": {"type": "rebuttal", "replyto": "B16IsOJQe", "comment": "A dynamic sentinel, generated potentially from the hidden state itself, may indeed be useful and an interesting variation. I'd expect it to perhaps fit and then overfit more rapidly, as there is a more direct way to make the mixture value fit the desired value. During the course of our work, we did not try any dynamic variations of the sentinel however.\n\nWhile I would expect it to be biased for particular contexts, I would note that the pointer sentinel-LSTM surprised me regarding specific word biases before - specifically, I didn't expect the pointer to be used for frequent words such as \"said\" or \"billions\".", "title": "Dynamic versus static sentinel"}, "HkQJVD6Qx": {"type": "rebuttal", "replyto": "SJgmRDAfg", "comment": "I agree that, whilst the pointer sentinel method works quite well, it'd be interesting to provide a direct comparison to the Gulcehre et al. method.\nWhen you first posted this, we began to modify the code to add an implementation of the Gulcehre et al. method and run experiments.\nUnfortunately we've been able to run relatively few experiments due to various complications and the speed of the larger experiments.\n\nIt appears the hyperparameters and regularization required for a strong Gulcehre et al. baseline are quite different to that of the standard LSTM or pointer sentinel LSTM.\nThe most interesting issue we have is that the Gulcehre et al. method overfits in quite a different way to the pointer sentinel method, likely requiring different regularization (specifically on or around the switching network itself) and a grid search of regularization values.\n\nhttp://i.imgur.com/V9zd5Nt.jpg\n\nAbove is the link to an experiment on a two layer 200 hidden unit LSTM with no dropout.\nThis is similar to the \"small\" model in Zaremba et al. except two layers instead of one.\nThe LSTM achieves 99.77 perplexity while the pointer sentinel LSTM achieves 86.09 - about the same perplexity a standard medium LSTM (650 hidden units) would achieve with Zaremba et al. dropout of 0.5.\nWhen run with the Gulcehre et al. method, the model fits far more quickly than the LSTM or pointer sentinel LSTM, but then overfits and requires early stopping, achieving a best perplexity of 105.9.\nApplying dropout on the hidden state before entering the switch doesn't seem to help as much as expected, with the model having a highly similar overfitting profile without achieving the original lower perplexity of the model without dropout.\n\nWe hypothesize that the pointer sentinel may act as a natural regularizer.\nThe Gulcehre et al. switching network produces the mixing value and can easily and directly nudge the mixing value the direction it would like by modifying the switching network's weights.\nThis may help to fit the training data more quickly but may also overfit more easily too.\nThe pointer sentinel can't overfit as easily as the values of the RNN outputs in the pointer window are constantly shifting during training.\n\nGiven the Gulcehre et al. method should beat the LSTM, finding the right regularization seems an important pre-requisite for providing a fair comparison with the pointer sentinel method.", "title": "Initial experiment with the Gulcehre et al. method and the search for appropriate regularization"}, "B16IsOJQe": {"type": "review", "replyto": "Byj72udxe", "review": "In this work, you proposed a sentinel vector for deciding the switch of the gate. Have you tried other options instead of a vector shared across all the predictions? Would it bias towards some specific words?This work is basically a combined pointer network applied on language modelling. \nThe smart point is that this paper aims at language modelling with longer context, where a memory of seen words (especially the rare words) would be very useful for predicting the rest of the sentences. \nHence, a combination of a pointer network and a standard language model would balance the copying seen words and predicting unseen words. \n\nGenerally, such as the combined pointer networks applied in sentence compression, a vector representation of the source sequence would be used to compute the gate. \nThis paper, instead, introduces a sentinel vector to carry out the mixture model, which is suitable in the case of language modelling. \nI would be interested in the variations of sentinel mixture implementation, though the current version has achieved very good results. \n\nIn addition, the new WikiText language modelling dataset is very interesting. \nIt probably can be a more standard dataset for evaluating the continuously-updated language model benchmarks than ptb dataset. \n\nOverall, this is a well-written paper. I recommend it to be accepted.", "title": "design of the sentinel vector", "rating": "8: Top 50% of accepted papers, clear accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "ryk_YxzEg": {"type": "review", "replyto": "Byj72udxe", "review": "In this work, you proposed a sentinel vector for deciding the switch of the gate. Have you tried other options instead of a vector shared across all the predictions? Would it bias towards some specific words?This work is basically a combined pointer network applied on language modelling. \nThe smart point is that this paper aims at language modelling with longer context, where a memory of seen words (especially the rare words) would be very useful for predicting the rest of the sentences. \nHence, a combination of a pointer network and a standard language model would balance the copying seen words and predicting unseen words. \n\nGenerally, such as the combined pointer networks applied in sentence compression, a vector representation of the source sequence would be used to compute the gate. \nThis paper, instead, introduces a sentinel vector to carry out the mixture model, which is suitable in the case of language modelling. \nI would be interested in the variations of sentinel mixture implementation, though the current version has achieved very good results. \n\nIn addition, the new WikiText language modelling dataset is very interesting. \nIt probably can be a more standard dataset for evaluating the continuously-updated language model benchmarks than ptb dataset. \n\nOverall, this is a well-written paper. I recommend it to be accepted.", "title": "design of the sentinel vector", "rating": "8: Top 50% of accepted papers, clear accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "SJgmRDAfg": {"type": "review", "replyto": "Byj72udxe", "review": "Why don't you compare your model's results with a baseline based on the approach proposed by Gulcehre et al.? It would be nice to see if the differences between the two models are significant in practice.This paper proposes augmenting RNN-based language models with a pointer network in order to deal better with rare words. The pointer network can point to words in the recent context, and hence the prediction for each time step is a mixture between the usual softmax output and the pointer distribution over the recent words. The paper also introduces a new language modelling dataset, which overcomes some of the shortcomings of previous datasets.\n\nThe reason for the score I gave for this paper is that I find the proposed model a direct application of the previous work Gulcehre et al., which follows a similar approach but for machine translation and summarization. The main differences I find is that Gulcehre et al. use an encoder-decoder architecture, and use the attention weights of the encoder to point to locations of words in the input, while here an RNN is used and a pointer network produces a distribution over the full vocabulary (by summing the softmax probabilities of words in the recent context). The context (query) vector for the pointing network is also different, but this is also a direct consequence of having a different application.\n\nWhile the paper describes the differences between the proposed approach and Gulcehre et al.\u2019s approach, I find some of the claims either wrong or not that significant. For example, quoting from Section 1:\n\u201cRather than relying on the RNN hidden state to decide when to use the pointer, as in the recent work of Gulcehre et al. (2016), we allow the pointer component itself to decide when to use the softmax vocabulary through a sentinel.\u201d\nAs far as I can tell, your model also uses the recent hidden state to form a query vector,  which is matched by the pointer network to previous words. Can you please clarify what you mean here?\n\nIn addition, quoting from section 3 which describes the model of Gulcehre et al.:\n\u201cRather than constructing a mixture model as in our work, they use a switching network to decide which component to use\u201d\nThis is not correct. The model of Gulcehre is also a mixture model, where an MLP with sigmoid output (switching network) is used to form a mixture between softmax prediction and locations of the input text.\n\nFinally, in the following quote, also from section 3: \n\u201cThe pointer network is not used as a source of information for the switching network as in our model.\u201d \nIt is not clear what the authors mean by \u201csource of information\u201d here. Is it the fact that the switching probability is part of the pointer softmax? I am wondering how significant this difference is.\n\nWith regards to the proposed dataset, there are also other datasets typically used for language modelling, including The Hutter Prize Wikipedia (enwik8) dataset (Hutter, 2012) and e Text8 dataset (Mahoney, 2009). Can you please comment on the differences between your dataset and those as well?\n\nI would be happy to discuss with the authors the points I raised, and I am open to changing my vote if there is any misunderstanding on my part.\n", "title": "empirical comparison between Gulcehre et al. and your model", "rating": "7: Good paper, accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "BJZyrpJBg": {"type": "review", "replyto": "Byj72udxe", "review": "Why don't you compare your model's results with a baseline based on the approach proposed by Gulcehre et al.? It would be nice to see if the differences between the two models are significant in practice.This paper proposes augmenting RNN-based language models with a pointer network in order to deal better with rare words. The pointer network can point to words in the recent context, and hence the prediction for each time step is a mixture between the usual softmax output and the pointer distribution over the recent words. The paper also introduces a new language modelling dataset, which overcomes some of the shortcomings of previous datasets.\n\nThe reason for the score I gave for this paper is that I find the proposed model a direct application of the previous work Gulcehre et al., which follows a similar approach but for machine translation and summarization. The main differences I find is that Gulcehre et al. use an encoder-decoder architecture, and use the attention weights of the encoder to point to locations of words in the input, while here an RNN is used and a pointer network produces a distribution over the full vocabulary (by summing the softmax probabilities of words in the recent context). The context (query) vector for the pointing network is also different, but this is also a direct consequence of having a different application.\n\nWhile the paper describes the differences between the proposed approach and Gulcehre et al.\u2019s approach, I find some of the claims either wrong or not that significant. For example, quoting from Section 1:\n\u201cRather than relying on the RNN hidden state to decide when to use the pointer, as in the recent work of Gulcehre et al. (2016), we allow the pointer component itself to decide when to use the softmax vocabulary through a sentinel.\u201d\nAs far as I can tell, your model also uses the recent hidden state to form a query vector,  which is matched by the pointer network to previous words. Can you please clarify what you mean here?\n\nIn addition, quoting from section 3 which describes the model of Gulcehre et al.:\n\u201cRather than constructing a mixture model as in our work, they use a switching network to decide which component to use\u201d\nThis is not correct. The model of Gulcehre is also a mixture model, where an MLP with sigmoid output (switching network) is used to form a mixture between softmax prediction and locations of the input text.\n\nFinally, in the following quote, also from section 3: \n\u201cThe pointer network is not used as a source of information for the switching network as in our model.\u201d \nIt is not clear what the authors mean by \u201csource of information\u201d here. Is it the fact that the switching probability is part of the pointer softmax? I am wondering how significant this difference is.\n\nWith regards to the proposed dataset, there are also other datasets typically used for language modelling, including The Hutter Prize Wikipedia (enwik8) dataset (Hutter, 2012) and e Text8 dataset (Mahoney, 2009). Can you please comment on the differences between your dataset and those as well?\n\nI would be happy to discuss with the authors the points I raised, and I am open to changing my vote if there is any misunderstanding on my part.\n", "title": "empirical comparison between Gulcehre et al. and your model", "rating": "7: Good paper, accept", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}}}