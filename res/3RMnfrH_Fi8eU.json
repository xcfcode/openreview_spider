{"notes": [{"ddate": null, "legacy_migration": true, "tmdate": 1424830320000, "tcdate": 1424830320000, "number": 8, "id": "hh1zh7rGzdh7x", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["victor liparsov"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Kita coba bersama"}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1424830320000, "tcdate": 1424830320000, "number": 11, "id": "jtW_tR3l_mtRJ", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["victor liparsov"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Kita coba bersama"}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1392792900000, "tcdate": 1392792900000, "number": 1, "id": "6Tyk61XEml3QB", "invitation": "ICLR.cc/2014/-/submission/conference/reply", "forum": "3RMnfrH_Fi8eU", "replyto": "lw7vlouJvPwxn", "signatures": ["Mikael Henaff"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "reply": "Thank you for the feedback. We posted an updated version of the paper which incorporates these changes."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1392792600000, "tcdate": 1392792600000, "number": 1, "id": "kiozwKfQtAiCE", "invitation": "ICLR.cc/2014/-/submission/conference/reply", "forum": "3RMnfrH_Fi8eU", "replyto": "CJ8OCn4eysJBk", "signatures": ["Mikael Henaff"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "reply": "Thank you for the feedback. To answer your comments:\r\n\r\n    -The paper does not explain when spatial-domain calculations would be faster\r\n    Our analysis in Section 2.2 compares the theoretical complexity of spatial-domain calculations to the Fourier-based method, and our empirical results in Section 3 compare the performance of two spatial-domain implementations (CudaConv and Torch7 (custom)) to the Fourier-based method. We added a sentence clarifying that these two implementations use the direct method in the spatial domain.\r\n\r\n    - The paper does not discuss how the trade-offs would be different on single-core or multi-core CPUs, or on different GPUs.\r\n\r\n    The main point is that for modern ConvNets with large numbers of input and output feature maps, we can significantly reduce the number of operations required by using the FFT-based method. This result (explained in Section 2.2) holds regardless of the architecture on which the algorithm is implemented. We performed experiments with a GPU implementation because this is the most widely used, but the general result holds regardless of whether we use a CPU or GPU.\r\n\r\n    - Details of the Cooley-Tukey implementation are not given / No mention is made of downloadable source code, this work might be hard to reproduce\r\n\r\n    We added a reference to the Cooley-Tukey algorithm. We will eventually make the source code available.\r\n\r\n    - What about non-square images?\r\n\r\n    We added a footnote explaining that the results also apply to non-square images.\r\n\r\n    - Why use big-O notation in 2.2 when the approximate number of FLOP/s is easy to compute? Asymptotic performance isn't really the issue at hand, the relevant values of n and k are not very large. Consider falling back on big-O notation only after making it clear that the main analysis will be done on more precise runtime expressions.\r\n\r\n    Done.\r\n\r\n    - The phrase 'Our Approach' is surprising on page 3, because it does not seem like you are inventing a new Fourier-domain approach to convolution. Isn't the spatial domain faster sometimes, Fourier faster sometimes, and you're writing a paper about how to know which is which? \r\n\r\nWe are aware that the idea of performing a convolution through a Fourier transform is not new. The speedup occurs when we are doing many pairwise convolutions between two sets of matrices, so the analysis is not on the level of a single convolution but for sets of convolutions. As pointed out by another reviewer, a related idea has been explored in the 90's for accelerating inference in previously-trained models. We added a mention of this work. However, our work differs from theirs in the following ways:\r\n(1) They use FFTs for inference (i.e. the fprop method only), whereas we show it can be used for all 3 training operations (fprop, backprop and gradient accumulation) as well.\r\n(2) They only use FFTs for inference using a previously-trained network (i.e, they do not use it to compute the fprop during training). One reason might be that the number of feature maps used at the time was much smaller (they use 25), and the method was not effective if the filters were not precomputed offline. We use FFTs for the fprop during training and show that it yields a substantial acceleration, even when the FFTs of the filters are not precomputed. This is due to the fact that modern ConvNets have a much larger number of feature maps, which is when the FFT-based method pays off.\r\n(3) They use FFTs for the first layer only (all other layers are fully connected), whereas we show that it provides acceleration at all levels.\r\n\r\nWe agree that the main idea is quite simple, but to our knowledge no-one in the machine learning community currently uses this method for training/inference with convnets, which makes it a new approach in our opinion.\r\n\r\n \r\n\r\n    - The last paragraph of section 3 is confusing: which of your experiments use and do not use the memory-intensive FFT-reuse trick? The following sentence in particular makes the reader feel he is being duped 'All of the analysis in the previous section assumes we are using this memory-efficient approach [which you now tell is is infeasible in important practical applications]; if memory is not a constraint, our algorithm becomes faster.' Faster than what? Faster than the thing that doesn't require prohibitive amounts of memory?\r\n\r\n    This sentence seems clear to us. By 'memory-efficient', we mean the approach that does *not* require very much extra memory. By 'All the analysis in the previous section', we are referring to the analysis in the previous section (2.2), which assumes we are using the memory-efficient approach which recomputes the FFTs at each iteration rather than storing them. Nevertheless, we reworded this and hope it is now crystal clear.\r\n\r\n    - Page 4: when you speak of 'another means to save memory' what was the first way? (Was the first way to recompute things on demand?)\r\n\r\n    Yes, which is described in the preceding paragraph.\r\n\r\n    - Page 5: Figure 3: This figure is hard to understand. The axes should be labeled on the axes, and the title should contain the contents of the current caption (not the names of the axes), and the caption should help the reader to understand the significance of what is being shown.\r\n\r\n    We fixed this.\r\n\r\n    - Why is the Torch7 implementation called Torch7(custom), and not just Torch7?\r\n\r\n    We mention at the beginning of Section 3 that this is a custom implementation using Torch7. This is different than the version that is shipped with Torch.\r\n\r\n    - The memory access patterns entailed by an algorithm is at least as important for GPU performance as the number of FLOP/s. How does the Cooley-Tukey FFT algorithm work, and how did you parallelize it? These implementation details are really important for anyone trying to reproduce your experiments. / What memory layout do you recommend for feature maps and filters? This ties in with a request for more detail on the algorithm you used.\r\n\r\n    This will be clear when we make the source code available."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1392061980000, "tcdate": 1392061980000, "number": 10, "id": "CJ8OCn4eysJBk", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["anonymous reviewer 9161"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "review of Fast Training of Convolutional Networks through FFTs", "review": "'Fast Training of Convolutional Networks through FFTs' compares Fourier-domain vs. spatial-domain convolutions in terms of speed in convnet applications.\r\n \r\nThe question of the relative speed of Fourier vs. Spatial convolutions is common among engineers and researchers, and to my knowledge no one has attempted to characterize (at least in convnet-specific terms) the settings when each approach is preferred.  Spatial domain convolutions have been the standard in multiple implementations over 30 years of research by scores of researchers.  This paper claims, surprisingly, that FFTs are nearly always better in modern convnets.  At the same time, the authors of the paper introduce a strategy for FFT parallelization on GPUs that is somewhat particular to the sorts of bulk FFTs that arise in convnet training, and the conclusions are based on that implementation running on GPU hardware.\r\n \r\n \r\nCONTRIBUTIONS\r\n \r\n1. Empirical comparison of spatial and Fourier convolutions for convnets\r\n \r\n2. A fast Cooley-Tukey FFT implementation for GPU that's well-suited to convnet application                                \r\n                                                                                                                                     \r\n \r\nQUALITY        \r\n \r\nThe figures and formatting are not very polished.         \r\n \r\n \r\nPRO            \r\n \r\n1. The paper aims at an important issue for convnet researchers        \r\n \r\n2. The claim that FFT-based convolutions are better will be broadly interesting                                            \r\n \r\n \r\nCON            \r\n \r\n1. The paper does not explain when spatial-domain calculations would be faster                                             \r\n \r\n2. The paper does not discuss how the trade-offs would be different on single-core or multi-core CPUs, or on different GPUs.\r\n \r\n3. Details of the Cooley-Tukey implementation are not given\r\n \r\n4. No mention is made of downloadable source code, this work might be hard to reproduce\r\n\r\n\r\nCOMMENTS\r\n \r\n- What about non-square images?\r\n \r\n- Why use big-O notation in 2.2 when the approximate number of FLOP/s is easy to compute? Asymptotic performance isn't really the issue at hand, the relevant values of n and k are not very large. Consider falling back on big-O notation only after making it clear that the main analysis will be done on more precise runtime expressions.\r\n \r\n- The phrase 'Our Approach' is surprising on page 3, because it does not seem like you are inventing a new Fourier-domain approach to convolution.  Isn't the spatial domain faster sometimes, Fourier faster sometimes, and you're writing a paper about how to know which is which?\r\n \r\n- The last paragraph of section 3 is confusing: which of your experiments use and do not use the memory-intensive FFT-reuse trick?  The following sentence in particular makes the reader feel he is being duped 'All of the analysis in the previous section assumes we are using this memory-efficient approach [which you now tell is is infeasible in important practical applications]; if memory is not a constraint, our algorithm becomes faster.'  Faster than what? Faster than the thing that doesn't require prohibitive amounts of memory?\r\n \r\n- Page 4: when you speak of 'another means to save memory' what was the first way? (Was the first way to recompute things on demand?)\r\n \r\n- Page 5: Figure 3: This figure is hard to understand. The axes should be labeled on the axes, and the title should contain the contents of the current caption (not the names of the axes), and the caption should help the reader to understand the significance of what is being shown.\r\n \r\n- Why is the Torch7 implementation called Torch7(custom), and not just Torch7?\r\n \r\n- The memory access patterns entailed by an algorithm is at least as important for GPU performance as the number of FLOP/s. How does the Cooley-Tukey FFT algorithm work, and how did you parallelize it? These implementation details are really important for anyone trying to reproduce your  experiments.\r\n \r\n- What memory layout do you recommend for feature maps and filters? This ties in with a request for more detail on the algorithm you used."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1391820480000, "tcdate": 1391820480000, "number": 9, "id": "lw7vlouJvPwxn", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["anonymous reviewer 3b1a"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "review of Fast Training of Convolutional Networks through FFTs", "review": "The paper describes the use of FFTs to speed-up the computation during training for convolutional neural networks working on images.\r\nEssentially this is presented as a pure speed-up technique and doesn't change the learning algorithm, or (in an interesting way) the representation. \r\n\r\nThe idea of applying FFTs to speed up image processing systems, particularly 'sliding windows' systems, is far from new and there is a large literature on this.In particular combining FFTs with Neural networks is not new,\r\ne.g. http://citeseerx.ist.psu.edu/viewdoc/summary?doi=10.1.1.36.1967\r\nSome of this prior literature should be cited. \r\n\r\nI am not aware of any work that applys the back-propagation in the Fourier domain too. \r\n\r\nThe resulting speed-ups are significant for the scenario the authors are considering, and it is useful to know that the practical implementation delivers these gains. As they conclude, these results may change the way such problems are formulated by removing the pressure to use small kernels.\r\n\r\nExpand the caption for Figure 2. Total number of operations for what? \r\n\r\nFigure 3 needs units for the y axis (text says seconds?), and for the x axes - ie areal or linear pixels?\r\nAlso for each of the 3 sets of graphs, there needs to be an indication of what are the values of the parameters which are  held constant.\r\n\r\nPlease say in the text that all 3 systems (Torch, Authors' and Krizhevsky) were running on the same (which?) GPU. \r\n\r\nCitation for Cooley-Tukey FFT?"}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1391311620000, "tcdate": 1391311620000, "number": 7, "id": "GGCLrfwpU8FfW", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["Mikael Henaff"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Thank you all for the constructive comments.\r\n\r\nSoumith,\r\nWe added details as to how we addressed the memory issues. It's true that the method requires some extra memory, but you can preallocate a block of memory once and re-use it to store the frequency representations at each layer. So the amount of extra memory needed is equal to the maximum amount of memory required to store the frequency representations of a single layer. This is small compared to the amount of memory needed to store a large network.\r\n\r\nRodrigo and Anonymous c809,\r\nWe added a number of results reporting the running times for several different configurations of image and kernel sizes, as well as different numbers of input and output feature maps. We also added the running times for a training iteration of a whole network (not just a single layer). This is to account for memory accesses, padding and other implementation details. We also mention the results of our unit tests which compare the outputs of the FFT-based convolution and the direct method (the differences are very small). Concerning the 'additional heuristic', this case is actually included in the analysis section so we removed it to avoid confusion.\r\n\r\nConcerning the border effects, we simply computed the circular convolution using the product of frequency representations and crop the output to only include coefficients for which the weight filter is contained within the image. We will clarify this in the paper.\r\n\r\nWe will also edit the graphs in Figure 3 to make the axis labels clearer."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1391311620000, "tcdate": 1391311620000, "number": 6, "id": "xxSIU3JuIPx-V", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["Mikael Henaff"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Thank you all for the constructive comments.\r\n\r\nSoumith,\r\nWe added details as to how we addressed the memory issues. It's true that the method requires some extra memory, but you can preallocate a block of memory once and re-use it to store the frequency representations at each layer. So the amount of extra memory needed is equal to the maximum amount of memory required to store the frequency representations of a single layer. This is small compared to the amount of memory needed to store a large network.\r\n\r\nRodrigo and Anonymous c809,\r\nWe added a number of results reporting the running times for several different configurations of image and kernel sizes, as well as different numbers of input and output feature maps. We also added the running times for a training iteration of a whole network (not just a single layer). This is to account for memory accesses, padding and other implementation details. We also mention the results of our unit tests which compare the outputs of the FFT-based convolution and the direct method (the differences are very small). Concerning the 'additional heuristic', this case is actually included in the analysis section so we removed it to avoid confusion.\r\n\r\nConcerning the border effects, we simply computed the circular convolution using the product of frequency representations and crop the output to only include coefficients for which the weight filter is contained within the image. We will clarify this in the paper.\r\n\r\nWe will also edit the graphs in Figure 3 to make the axis labels clearer."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1390978320000, "tcdate": 1390978320000, "number": 5, "id": "_1Zn_ktRn7elP", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["anonymous reviewer c809"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "review of Fast Training of Convolutional Networks through FFTs", "review": "The paper presents a technique for accelerating the processing of CNNs by performing training and inference in the frequency (Fourier) domain. The work argues that at a certain scale, the overhead of applying FFT  and inverse-FFT is marginal relative to the overall speed gain.  \r\n\r\nAs noted by the previous reviewers, the speedup is presented simply as that obtained for three functions that lie at the heart of each convolutional layer. It would be valuable if the speedup could also be presented in the context of a comparison to the overall training time of a CNN on a standard dataset.\r\n\r\nAlso noted is the lack of reference to the fact that Convolution Theorem refers to circular convolution and not linear (i.e. non-circular) convolution. It is assumed inconsequential since CNNs use neither circular convolution (weight filters do not wrap around images) nor linear convolution (weight filters are always fully contained within the image and do not 'hang off' the edges). Thus, the resulting differences between circular and linear convolution would not impact the feature map y_f. This seems to be hinted at by the n' term in section 2.2, but is not obvious.\r\n\r\nThe future work seems logical and would be interesting to pursue. One other direction to consider is approximations to the FFT (which there are many) that could retain most of the information needed in context of CNNs at a fraction of the computational cost.\r\n\r\nMinor editorial issue: in figure 3 the axes are noted in the title of the figure rather than as labels for the x and y axis."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1390978260000, "tcdate": 1390978260000, "number": 4, "id": "wwk0Lbjg6BOSV", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["anonymous reviewer c809"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "review of Fast Training of Convolutional Networks through FFTs", "review": "The paper presents a technique for accelerating the processing of CNNs by performing training and inference in the frequency (Fourier) domain. The work argues that at a certain scale, the overhead of applying FFT  and inverse-FFT is marginal relative to the overall speed gain.  \r\n\r\nAs noted by the previous reviewers, the speedup is presented simply as that obtained for three functions that lie at the heart of each convolutional layer. It would be valuable if the speedup could also be presented in the context of a comparison to the overall training time of a CNN on a standard dataset.\r\n\r\nAlso noted is the lack of reference to the fact that Convolution Theorem refers to circular convolution and not linear (i.e. non-circular) convolution. It is assumed inconsequential since CNNs use neither circular convolution (weight filters do not wrap around images) nor linear convolution (weight filters are always fully contained within the image and do not 'hang off' the edges). Thus, the resulting differences between circular and linear convolution would not impact the feature map y_f. This seems to be hinted at by the n' term in section 2.2, but is not obvious.\r\n\r\nThe future work seems logical and would be interesting to pursue. One other direction to consider is approximations to the FFT (which there are many) that could retain most of the information needed in context of CNNs at a fraction of the computational cost.\r\n\r\nMinor editorial issue: in figure 3 the axes are noted in the title of the figure rather than as labels for the x and y axis."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1390502640000, "tcdate": 1390502640000, "number": 3, "id": "mqDyt0Csiue0G", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["Rodrigo Benenson"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Speeding up convolutional networks is a quite interesting topic. The presented method seems effective and principled.\r\nThe paper reads easily however the experimental results seems somewhat lacking.\r\nThe whole premise of the work is to speed-up training and testing, yet there is not even anecdotal results regarding total training time. This matters because, at the end of the day, it is the system wide performance that matters. \r\n\r\nA theoretical paper that only shows improvement on the number of operations, might hide the fact that the memory access is now more convolved, and thus the overall speed goes down (despite having reduced the number of operations). In the context of this paper, showing some evidence of the overall speed would be welcome.\r\n\r\nAt the same time, full training experiments would show that indeed, in practice, there is no degradation of the learnt model or the predicted scores. There is all kind of implementation issues that can convert theoretically identical results into different outcomes (because in a computer a + (b + c) != (a + b) + c).\r\n\r\nWhen using methods based on Fourier transform border effects enter into play. Could you mention how you handle these ?\r\nAlso section 3 mentions an 'additional heuristic', could you detail why this is an heuristic, and what are the consequences of using it ?\r\nFinally, are there plan of releasing this new training code ? Open source releases tend to increase the impact of a paper.\r\n\r\nOverall quite interesting work, looking forward for the results of training filters directly in the Fourier domain."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1388895300000, "tcdate": 1388895300000, "number": 2, "id": "EEW9_MBSp3EMG", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["Soumith Chintala"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Training convnets on GPUs has been a challenge in terms of both time and memory constraints, more often constraining the size of the models by memory requirements per GPU rather than processing time.\r\n\r\nIt would be helpful to add a comparison of memory requirements for your method compared to purely spatial convolution implementations.\r\n\r\nYou mention: \r\n'Also note that our method performs the same regardless of kernel size, since we pad the kernel to be the\r\nsame size as the input image before applying the FFT'\r\n\r\nFrom my understanding without looking at your implementation, I would assume that because of this particular operation, the memory requirements would balloon, making this method impractical to even implement current state-of-the-art models for Image and audio recognition problems.\r\nIt would be good to have a section talking about practical constraints, issues and how you guys think they should be handled."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"ddate": null, "legacy_migration": true, "tmdate": 1388894400000, "tcdate": 1388894400000, "number": 1, "id": "rYndr5WNSIv0s", "invitation": "ICLR.cc/2014/-/submission/conference/review", "forum": "3RMnfrH_Fi8eU", "replyto": "3RMnfrH_Fi8eU", "signatures": ["Soumith Chintala"], "readers": ["everyone"], "writers": ["anonymous"], "content": {"title": "", "review": "Could you please update your paper with labels for the graphs in Figure 3? It is unclear from the figures what the axes are."}, "nonreaders": [], "details": {"replyCount": 0, "overwriting": [], "revisions": false, "forumContent": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "tags": [], "invitation": {}}}, {"replyto": null, "ddate": null, "legacy_migration": true, "tmdate": 1387855980000, "tcdate": 1387855980000, "number": 40, "id": "3RMnfrH_Fi8eU", "invitation": "ICLR.cc/2014/conference/-/submission", "forum": "3RMnfrH_Fi8eU", "signatures": ["mathieu@cs.nyu.edu"], "readers": ["everyone"], "content": {"title": "Fast Training of Convolutional Networks through FFTs", "decision": "submitted, no decision", "abstract": "Convolutional networks are one of the most widely employed architectures in computer vision and machine learning. In order to leverage their ability to learn complex functions, large amounts of data are required for training. Training a large convolutional network to produce state-of-the-art results can take weeks, even when using modern GPUs. Producing labels using a trained network can also be costly when dealing with web-scale datasets. In this work, we present a simple algorithm which accelerates training and inference by a significant factor, and can yield improvements of over an order of magnitude compared to existing state-of-the-art implementations. This is done by computing convolutions as pointwise products in the Fourier domain while reusing the same transformed feature map many times. The algorithm is implemented on a GPU architecture and addresses a number of related challenges.", "pdf": "https://arxiv.org/abs/1312.5851", "paperhash": "mathieu|fast_training_of_convolutional_networks_through_ffts", "keywords": [], "conflicts": [], "authors": ["Michael Mathieu", "Mikael Henaff", "Yann LeCun"], "authorids": ["mathieu@cs.nyu.edu", "mikael314@gmail.com", "ylecun@gmail.com"]}, "writers": [], "details": {"replyCount": 13, "writable": false, "overwriting": [], "revisions": false, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "multiReply": null, "taskCompletionCount": null, "duedate": 1369422751717, "tmdate": 1496674357195, "id": "ICLR.cc/2014/conference/-/submission", "writers": ["ICLR.cc/2014"], "signatures": ["OpenReview.net"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": null, "replyto": null, "writers": {"values-regex": "~.*"}, "signatures": {"values-regex": "~.*", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"pdf": {"required": true, "order": 5, "description": "Either upload a PDF file or provide a direct link to your PDF on ArXiv (link must begin with http(s) and end with .pdf)", "value-regex": "upload|(http|https):\\/\\/.+\\.pdf"}, "title": {"required": true, "order": 1, "description": "Title of paper.", "value-regex": ".{1,250}"}, "abstract": {"required": true, "order": 4, "description": "Abstract of paper.", "value-regex": "[\\S\\s]{1,5000}"}, "authors": {"required": true, "order": 2, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of author names, as they appear in the paper."}, "conflicts": {"required": true, "order": 100, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of email domains of people who would have a conflict of interest in reviewing this paper, (e.g., cs.umass.edu;google.com, etc.)."}, "keywords": {"order": 6, "description": "Comma separated list of keywords.", "values-dropdown": []}, "authorids": {"required": true, "order": 3, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of author email addresses, in the same order as above."}}}, "nonreaders": [], "noninvitees": [], "expdate": 1377198751717, "cdate": 1496674357195}}}], "count": 14}