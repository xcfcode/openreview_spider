{"notes": [{"id": "B1xnPsA5KX", "original": "B1lLG0DqKQ", "number": 299, "cdate": 1538087779842, "ddate": null, "tcdate": 1538087779842, "tmdate": 1545355416951, "tddate": null, "forum": "B1xnPsA5KX", "replyto": null, "invitation": "ICLR.cc/2019/Conference/-/Blind_Submission", "content": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "details": {"replyCount": 9, "writable": false, "overwriting": [], "revisions": false, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Blind_Submission", "rdate": null, "ddate": null, "expdate": null, "duedate": 1538085600000, "tmdate": 1538142958393, "tddate": null, "super": null, "final": null, "reply": {"signatures": {"values": ["ICLR.cc/2019/Conference"]}, "forum": null, "readers": {"values": ["everyone"]}, "replyto": null, "content": {"authorids": {"values-regex": ".*"}, "authors": {"values": ["Anonymous"]}}, "writers": {"values": ["ICLR.cc/2019/Conference"]}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["~"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": null, "taskCompletionCount": null, "transform": null, "cdate": 1538142958393}}, "tauthor": "OpenReview.net"}, {"id": "HJlReIzhJV", "original": null, "number": 1, "cdate": 1544459765915, "ddate": null, "tcdate": 1544459765915, "tmdate": 1545354497935, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Meta_Review", "content": {"metareview": "This paper presents a probabilistic programming language where models are constructed out of building blocks which specify both the distribution and an inference procedure. As a demonstration, they show how a GP-LVM can be implemented.\n\nThe paper spends a lot of space arguing for the benefits of modularity. Modularity is of course hard to argue with, and the benefits are already understood in the PPL community. But, as the reviewers point out, various other PPLs have already adopted various strategies to enable modular definition of models, and (in cases like Venture) special-purpose higher-level inference algorithms. This paper contains little discussion of other PPLs and how the specific design decisions relate to theirs, so it's hard to judge whether this paper really covers new ground. Such discussion wasn't added to the revised paper, even though multiple reviewers asked for it. I can't recommend acceptance.\n", "confidence": "5: The area chair is absolutely certain", "recommendation": "Reject", "title": "modularity is good, but the specifics aren't really justified in relation to similar PPLs"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/Area_Chair1"], "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference/Paper299/Area_Chair1"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Meta_Review", "rdate": null, "ddate": null, "expdate": null, "duedate": 1541548800000, "tmdate": 1545353264345, "tddate": null, "super": null, "final": null, "reply": {"forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "readers": {"description": "Select all user groups that should be able to read this comment. Selecting 'All Users' will allow paper authors, reviewers, area chairs, and program chairs to view this comment.", "values": ["everyone"]}, "signatures": {"description": "How your identity will be displayed with the above content.", "values-regex": "ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+"}, "writers": {"description": "Users that may modify this record.", "values-regex": "ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+"}, "content": {"title": {"order": 1, "value-regex": ".{1,500}", "description": "Brief summary of your review.", "required": true}, "metareview": {"order": 2, "value-regex": "[\\S\\s]{1,5000}", "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons.", "required": true}, "recommendation": {"order": 3, "value-dropdown": ["Accept (Oral)", "Accept (Poster)", "Reject"], "required": true}, "confidence": {"order": 4, "value-radio": ["5: The area chair is absolutely certain", "4: The area chair is confident but not absolutely certain", "3: The area chair is somewhat confident", "2: The area chair is not sure", "1: The area chair's evaluation is an educated guess"], "required": true}}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["ICLR.cc/2019/Conference/Paper299/Area_Chairs"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": false, "taskCompletionCount": null, "transform": null, "cdate": 1545353264345}}}, {"id": "Skxbu8JcAX", "original": null, "number": 4, "cdate": 1543267945047, "ddate": null, "tcdate": 1543267945047, "tmdate": 1543267945047, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "HJeHr0F0K7", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "content": {"title": "Re: Somewhat important direction of research, but not entirely novel and lacking discussion", "comment": "Thanks for your comments.\n\n> Details of how a GP fits within the probabilistic programming framework is missing. Should be more discussion of results.\n\nWe will include more details about the model in the examples and the experiments.\n\n> Authors should cite recent works in PP.\n\nThanks for listing the relevant works. We will cite them.\n"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/Authors"], "readers": ["everyone"], "nonreaders": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"], "writers": ["ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "rdate": null, "ddate": null, "expdate": null, "duedate": null, "tmdate": 1543621622842, "tddate": null, "super": null, "final": null, "reply": {"forum": "B1xnPsA5KX", "replyto": null, "readers": {"description": "Select all user groups that should be able to read this comment.", "value-dropdown-hierarchy": ["everyone", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"]}, "nonreaders": {"values": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"]}, "signatures": {"description": "", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+|ICLR.cc/2019/Conference/Paper299/Authors|ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+|ICLR.cc/2019/Conference/Program_Chairs"}, "writers": {"description": "Users that may modify this record.", "values-copied": ["ICLR.cc/2019/Conference", "{signatures}"]}, "content": {"title": {"order": 0, "value-regex": ".{1,500}", "description": "Brief summary of your comment.", "required": true}, "comment": {"order": 1, "value-regex": "[\\S\\s]{1,5000}", "description": "Your comment or reply (max 5000 characters).", "required": true}}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": true, "taskCompletionCount": null, "transform": null, "cdate": 1543621622842}}}, {"id": "HJgAnB19C7", "original": null, "number": 3, "cdate": 1543267766376, "ddate": null, "tcdate": 1543267766376, "tmdate": 1543267766376, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "rkegcHEfsm", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "content": {"title": "Re: A good work on modularisation of probabilistic programming languages", "comment": "Thanks for your suggestions and feedbacks.\n\n> the actual content of the paper describes an extension of an existing system. Such an extension is certainly important, but the paper does not provide much more information.\n\nWe will include more details of the proposed approach.\n\n> the results of the experimental test do not seem to me to be able to support the main objective of the extension\n\nWe will include more examples/experiments to show case our library.\n\n> As far as the execution of the system is concerned, is this extension able to improve the scalability or reduce the walltime? Is this visible in the presented test (at least in terms of speed up)? Or is the convenience of this approach the simpler way to define distributions?\n\nOur library provides a more convenient way to define sophisticated distributions. By taking the advantage of GPU acceleration, which is provided via the underlying MXNet library, the Gaussian process models implemented in our library is faster than the previous implementations in pure Python (in GPy).\n"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/Authors"], "readers": ["everyone"], "nonreaders": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"], "writers": ["ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "rdate": null, "ddate": null, "expdate": null, "duedate": null, "tmdate": 1543621622842, "tddate": null, "super": null, "final": null, "reply": {"forum": "B1xnPsA5KX", "replyto": null, "readers": {"description": "Select all user groups that should be able to read this comment.", "value-dropdown-hierarchy": ["everyone", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"]}, "nonreaders": {"values": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"]}, "signatures": {"description": "", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+|ICLR.cc/2019/Conference/Paper299/Authors|ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+|ICLR.cc/2019/Conference/Program_Chairs"}, "writers": {"description": "Users that may modify this record.", "values-copied": ["ICLR.cc/2019/Conference", "{signatures}"]}, "content": {"title": {"order": 0, "value-regex": ".{1,500}", "description": "Brief summary of your comment.", "required": true}, "comment": {"order": 1, "value-regex": "[\\S\\s]{1,5000}", "description": "Your comment or reply (max 5000 characters).", "required": true}}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": true, "taskCompletionCount": null, "transform": null, "cdate": 1543621622842}}}, {"id": "Hyl4gE19AQ", "original": null, "number": 2, "cdate": 1543267307762, "ddate": null, "tcdate": 1543267307762, "tmdate": 1543267307762, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "HklYg8l93X", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "content": {"title": "Re: The main idea is the introduction of a new building block-probabilistic modules-into probabilistic programming with the aspiration to improve the modularity of the language.", "comment": "Thanks for your suggestions and feedbacks.\n\n> when we have a (often complex) combination of several probabilistic modules, how do you then leverage the tailored solvers? What is it that guarantees that these are relevant in the new combined construction?\n\nFor variational inference, the guarantee for a combination of several probabilistic modules comes from the fact that, replacing a part of a prior distribution in a variational lower bound with another variational lower bound results into a further lower bound. Therefore, we can easily put together multiple probabilistic modules for a combined model. A good example will be deep Gaussian processes, e.g. (Damianou&Lawrence 2013), which can be constructed by putting together multiple variational sparse Gaussian processes.\n\n> This is of course true and it is also part of some existing PPLs, for example Birch via their so-called \"delayed sampling\". Why is it better to insist on hard-coding this for each probabilistic module? and how can you guarantee smooth functioning when several probabilistic modules are combined in complex ways?\n\nThanks for pointing out the relevant work. We will cite it. In the case of conjugate models, the hard-coding approach would not be able to automatically choose the best approach. Instead, it relies on users to make the right choice. Although the hard-coding approach is not as smart, it is a more generic approach which can be applied to the cases beyond conjugate models.\n\n> At the same time, is not one of the key reasons for using PPLs compared to probabilistic graphical models that it offers a richer model class compared to probabilistic graphical models?\n\nPPLs can describe models beyond probabilistic graphical models, however, a big portion of real world use cases of PPLs are about Bayesian inference on probabilistic graphical models, e.g., Bayesian statistics with Stan. Our library starts with this restrictive use case and may extend in future.\n\n> Why do you remove this possibility by insisting on a specific point estimate? or is this just a particular choice of this example and not a general design choice?\n\nDoing point estimates in the example is a particular (common) choice of the model in this example. We will include examples with Bayesian inference on hyper-parameters.\n"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/Authors"], "readers": ["everyone"], "nonreaders": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"], "writers": ["ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "rdate": null, "ddate": null, "expdate": null, "duedate": null, "tmdate": 1543621622842, "tddate": null, "super": null, "final": null, "reply": {"forum": "B1xnPsA5KX", "replyto": null, "readers": {"description": "Select all user groups that should be able to read this comment.", "value-dropdown-hierarchy": ["everyone", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"]}, "nonreaders": {"values": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"]}, "signatures": {"description": "", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+|ICLR.cc/2019/Conference/Paper299/Authors|ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+|ICLR.cc/2019/Conference/Program_Chairs"}, "writers": {"description": "Users that may modify this record.", "values-copied": ["ICLR.cc/2019/Conference", "{signatures}"]}, "content": {"title": {"order": 0, "value-regex": ".{1,500}", "description": "Brief summary of your comment.", "required": true}, "comment": {"order": 1, "value-regex": "[\\S\\s]{1,5000}", "description": "Your comment or reply (max 5000 characters).", "required": true}}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": true, "taskCompletionCount": null, "transform": null, "cdate": 1543621622842}}}, {"id": "Hygi62CKAX", "original": null, "number": 1, "cdate": 1543265474712, "ddate": null, "tcdate": 1543265474712, "tmdate": 1543265474712, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "BJlhDyz5nX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "content": {"title": "Re: The paper proposes a new probabilistic programming language, but has a lack of scientific novelty", "comment": "Thanks for the suggestions and feedbacks.\n\n> Why the paradigm of encapsulating inference methods in probabilistic modules is legitimate for constructing complex probabilistic models? \n\nA dedicated inference method for a specific model typically outperforms a generic black-box inference method. With the emphasis on flexibility, PPLs mostly build on generic inference methods such as black-box variational inference, which leads to a performance gap between the model with a dedicated implementation and the model implemented in a PPL. Encapsulating inference methods is an approach that can bridge the performance gap.\n\n\n> What inference methods and probabilistic models can we use as building blocks?\n\nWe focused on variational inference in our library, but other inference methods can also be implemented under a similar idea, e.g., Rainforth (2018) proposes nested probabilistic programming for MCMC methods. For variational inference, probabilistic models that can benefit from an efficient variational lower bound are good candidates for building probabilistic modules.\n\n> Do we need to be aware of specific inference methods that are encapsulated or we can use any blocks in any order as we do in deep learning frameworks?\n\nBy nesting a encapsulated variational lower bound into the external lower bound, the external inference method does not need to be aware of a specific choice of encapsulated inference method. In practice, a user may need to be aware of specific tuning parameters.\n\n> But the application area of MXFusion remains unclear.\n\nWe will include better examples to show cases the difference.\n"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/Authors"], "readers": ["everyone"], "nonreaders": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"], "writers": ["ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Comment", "rdate": null, "ddate": null, "expdate": null, "duedate": null, "tmdate": 1543621622842, "tddate": null, "super": null, "final": null, "reply": {"forum": "B1xnPsA5KX", "replyto": null, "readers": {"description": "Select all user groups that should be able to read this comment.", "value-dropdown-hierarchy": ["everyone", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"]}, "nonreaders": {"values": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"]}, "signatures": {"description": "", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+|ICLR.cc/2019/Conference/Paper299/Authors|ICLR.cc/2019/Conference/Paper299/Area_Chair[0-9]+|ICLR.cc/2019/Conference/Program_Chairs"}, "writers": {"description": "Users that may modify this record.", "values-copied": ["ICLR.cc/2019/Conference", "{signatures}"]}, "content": {"title": {"order": 0, "value-regex": ".{1,500}", "description": "Brief summary of your comment.", "required": true}, "comment": {"order": 1, "value-regex": "[\\S\\s]{1,5000}", "description": "Your comment or reply (max 5000 characters).", "required": true}}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"], "noninvitees": [], "writers": ["ICLR.cc/2019/Conference"], "multiReply": true, "taskCompletionCount": null, "transform": null, "cdate": 1543621622842}}}, {"id": "rkegcHEfsm", "original": null, "number": 1, "cdate": 1539618184295, "ddate": null, "tcdate": 1539618184295, "tmdate": 1542360845085, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "content": {"title": "A good work on modularisation of probabilistic programming languages", "review": "The paper presents an extension of the MXFusion language that allows the use of probabilistic modules. These modules are defined as a set of random variables and a specific probabilistic distribution. The modules also contain dedicated inference methods. Using these modules, one can use probabilistic distributions with inference methods tailored to the distribution, which are usually more efficient than generic inference systems.\nThe paper presents several examples using Gaussian process models, evaluated by comparison with GPy and the standard spare gaussian process method implemented in MXFusion.\n\nOverall, the paper is well written and clear, and all claims are justified. The idea of modularization is not really new (as other systems implement something similar) but this approach tries to be general, in order not to pose constraints on the specification of modules. The related work section provides a good positioning of the approach.\nI have not found any specific problems in the paper, the quality is rather high. However, the actual content of the paper describes an extension of an existing system. Such an extension is certainly important, but the paper does not provide much more information.\nMoreover, the results of the experimental test do not seem to me to be able to support the main objective of the extension, which is to give the possibility to exploit more specific probabilistic model and inference methods to achieve better results than an approach using general methods.\nAs far as the execution of the system is concerned, is this extension able to improve the scalability or reduce the walltime? Is this visible in the presented test (at least in terms of speed up)? Or is the convenience of this approach the simpler way to define distributions?\n\nAs for minor issues that I can point out, one concerns the definition of shape in the Variable of m.sigma2 (figures 1, 2, 3). I do not know the used in MXFusion, thus this might not be an error, but it seems that in the shape definition something is missing. It is written that shape=(1,), is it correct or is there an error? In case of absence of error, what does the empty argument mean?\n\nThe power benchmark is not described.\n\nIn references, Thomas V. Wiecki is mentioned with and without the first letter of middle name. I suggest to uniform the references.\n\nTypos:\n- Abstract: \"... but also sophisticated probabilistic model*s* such as ...\"\n- Sec. 1, first row of page 2: The sentence \"this would bring the a lot of benefits ...\". The \"the\" word should be deleted.\n- Sec. 1 refers to a section after 4 which does not exist in the paper.\n- Page 5: remove the full stop before the colon in the 4th row.\n- Page 5: \"The log_pdf method of the SGPR module compute*s* the above variational lower bound\"\n- Sec. 6: the sentence \"MXFusion aims at closing the gap between having specialized, highly performant algorithms and generic, easily maintained generic algorithms by introducing probabilistic modules.\" should be corrected.\n\n\nPros\n- The extension allows the use of modules that define specific probabilistic distribution/inference methods\n- It seems easy to extend the system with other modules\n- Its a really useful extension...\n\nCons\n- The performance presented in the paper is not entirely convincing\n- ... but it is just an extension of an existing system", "rating": "5: Marginally below acceptance threshold", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/AnonReviewer2"], "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": true, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "cdate": 1542234493318, "expdate": 1552335264000, "duedate": 1541196000000, "reply": {"forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "readers": {"description": "The users who will be allowed to read the reply content.", "values": ["everyone"]}, "nonreaders": {"values": []}, "signatures": {"description": "How your identity will be displayed with the above content.", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+"}, "writers": {"description": "Users that may modify this record.", "values": ["ICLR.cc/2019/Conference"]}, "content": {"title": {"order": 1, "value-regex": ".{0,500}", "description": "Brief summary of your review.", "required": true}, "review": {"order": 2, "value-regex": "[\\S\\s]{1,200000}", "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons (max 200000 characters).", "required": true}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"], "required": true}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"], "required": true}}}, "multiReply": false, "tcdate": 1552335693340, "tmdate": 1552335693340, "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers"], "noninvitees": [], "signatures": ["ICLR.cc/2019/Conference"]}}}, {"id": "BJlhDyz5nX", "original": null, "number": 3, "cdate": 1541181284092, "ddate": null, "tcdate": 1541181284092, "tmdate": 1541534112248, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "content": {"title": "The paper proposes a new probabilistic programming language, but has a lack of scientific novelty", "review": "In this paper authors present a new Probabilistic Programming Language (PPL) MXFusion. Similarly to the languages for the deep learning (TensorFlow, PyTorch, etc.), this language introduce probabilistic modules that are used as building blocks for complex probabilistic models. Introducing modularity to the probabilistic programming, raises the problem of inference for probabilistic models. Since, we cannot obtain the exact solution on practice we have to resort to approximate inference methods. The approximate inference methods can be either generic, thus, being suitable for many probabilistic models but resulting in poor approximation, or specific, thus, having good approximation quality, but only for specific probabilistic models. Authors propose to address this problem by encapsulating specific inference methods in corresponding probabilistic modules. Doing so, one can perform approximate inference for every module with the best suitable inference technique. Authors demonstrate interface of MXFusion for three well known probabilistic models: Bayesian linear regression, deep kernel learning, Bayesian Gaussian process latent variable model.\n\nApproaching the problem of building complex probabilistic models by introducing modular PPL is an important direction of study. But, regarding this paper I have the following concerns.\n- In my opinion, the structure of the paper can be greatly improved. From general words about modularity and approximate inference authors dive to the very specific cases of probabilistic models. Following such structure, authors don\u2019t give a clear answer to the following questions. Why the paradigm of encapsulating inference methods in probabilistic modules is legitimate for constructing complex probabilistic models? What inference methods and probabilistic models can we use as building blocks? Do we need to be aware of specific inference methods that are encapsulated or we can use any blocks in any order as we do in deep learning frameworks?\n- Novelty of that paper is the new design of PPL. That is an interesting and important question for the community, but maybe ICLR paper is not the best format to present such kind of novelty. \n- From the specific examples in the paper, legitimacy of such modular structure is clear only for variational inference (that seems to be a common knowledge) and variational approximation of gaussian processes. But the application area of MXFusion remains unclear. Verbatim examples of code for the specific examples doesn\u2019t make the difference between MXFusion and other PPLs clear, because it can be treated as encapsulation of the code into some classes, that can be implemented in other languages as well.\n- Comparison with other frameworks can be improved. In experimental section authors provide comparison with GPy framework in terms of RMSE and log-likelihood for gaussian process with 50 inducing points. As I understood both frameworks use the same inference methods and achieve the same performance, so the experiment can be considered as sanity check for MXFusion. The paper could benefit from comparison between different inference methods and providing benchmarks for inference time.\n\nOverall, the paper proposes a new PPL that is an important direction of study, but have several drawbacks and conference paper format is not the best way to present such kind of novelty.\n\nTypos:\n- Page 1, \u201cdespite the different of DNNs\u2026\u201d -> \u201cdespite the difference of DNNs\u2026\u201d?\n- Page 2, missing reference of the section\n- Page 2, section 3, \u201c... sightly different form.\u201d -> \u201c... slightly different form\u201d?", "rating": "3: Clear rejection", "confidence": "3: The reviewer is fairly confident that the evaluation is correct"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/AnonReviewer1"], "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "cdate": 1542234493318, "expdate": 1552335264000, "duedate": 1541196000000, "reply": {"forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "readers": {"description": "The users who will be allowed to read the reply content.", "values": ["everyone"]}, "nonreaders": {"values": []}, "signatures": {"description": "How your identity will be displayed with the above content.", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+"}, "writers": {"description": "Users that may modify this record.", "values": ["ICLR.cc/2019/Conference"]}, "content": {"title": {"order": 1, "value-regex": ".{0,500}", "description": "Brief summary of your review.", "required": true}, "review": {"order": 2, "value-regex": "[\\S\\s]{1,200000}", "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons (max 200000 characters).", "required": true}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"], "required": true}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"], "required": true}}}, "multiReply": false, "tcdate": 1552335693340, "tmdate": 1552335693340, "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers"], "noninvitees": [], "signatures": ["ICLR.cc/2019/Conference"]}}}, {"id": "HklYg8l93X", "original": null, "number": 2, "cdate": 1541174769205, "ddate": null, "tcdate": 1541174769205, "tmdate": 1541534111999, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "content": {"title": "The main idea is the introduction of a new building block-probabilistic modules-into probabilistic programming with the aspiration to improve the modularity of the language.", "review": "The paper works with the modularization of PPLs with natural inspiration for the successful modularization recently introduced in all deep learning softwares. \n\n* Within your so-called probabilistic modules you package dedicated inference methods that are tailored for this particular class of problems and argues that this will perform better than using a general purpose solver. For each specific case this does of course make a lot of sense. However, when it comes to the relevant case (especially within probabilistic programming) when we have a (often complex) combination of several probabilistic modules, how do you then leverage the tailored solvers? What is it that guarantees that these are relevant in the new combined construction? \n\n* Related to the above you write in your conclusion that \"Once an inference algorithm is chosen, it remains the same across a probabilistic model. However, given a specific probabilistic model, e.g., a conjugate model, a specialized inference algorithm that exploits the mathematical properties of that particular model will always produce inference results that are as good or better than the generic inference in terms of both accuracy and efficiency.\" This is of course true and it is also part of some existing PPLs, for example Birch via their so-called \"delayed sampling\": \nhttp://proceedings.mlr.press/v84/murray18a/murray18a.pdf\nThe implementation there is very different from what you propose. As far as I can understand you require hard-coding of each specific model, whereas in the paper mentioned above they seem to automate att conjugate gradient calculations to a much greater extent. Why is it better to insist on hard-coding this for each probabilistic module? and how can you guarantee smooth functioning when several probabilistic modules are combined in complex ways?\n\n* In the inference method that you briefly sketch in Section 3 you make use of VI and the intractable integrals that results are then handled using Monte Carlo. What is the gain of using VI + Monte Carlo compared to direct use of Monte Carlo? Via direct use of some kind of Monte Carlo method you would be able to guarantee performance and do proper analysis, whereas with VI you loose that capability. However, VI does of course have other pros, but my question arises due to the fact that you end up using Monte Carlo anyway.\n\n* You write that \"In PPLs, a probabilistic model is often presented as a graph of random variables...\". This is certainly true and the word \"often\" is very important in this sentence. At the same time, is not one of the key reasons for using PPLs compared to probabilistic graphical models that it offers a richer model class compared to probabilistic graphical models? While I perfectly respect you choice to specifying models in MXFusion using using probabilistic graphical models I do find this quite restrictive and it seems to miss some of the key possibilities with PPLs.\n\n* In your BLR example (which is very instructive by the way) you compute the solution via MAP. This is also find rather puzzling since that removes another great feature of PPLs, namely to work with probability distributions throughout the entire inference stage. The user can then of course choose to extract whatever point estimate might be needed in the end. Why do you remove this possibility by insisting on a specific point estimate? or is this just a particular choice of this example and not a general design choice?\n\n\nThe paper contains a lot of issues related to the use of the English language and would benefit from proper proofreading.\n", "rating": "4: Ok but not good enough - rejection", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "signatures": ["ICLR.cc/2019/Conference/Paper299/AnonReviewer3"], "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Official_Review", "cdate": 1542234493318, "expdate": 1552335264000, "duedate": 1541196000000, "reply": {"forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "readers": {"description": "The users who will be allowed to read the reply content.", "values": ["everyone"]}, "nonreaders": {"values": []}, "signatures": {"description": "How your identity will be displayed with the above content.", "values-regex": "ICLR.cc/2019/Conference/Paper299/AnonReviewer[0-9]+"}, "writers": {"description": "Users that may modify this record.", "values": ["ICLR.cc/2019/Conference"]}, "content": {"title": {"order": 1, "value-regex": ".{0,500}", "description": "Brief summary of your review.", "required": true}, "review": {"order": 2, "value-regex": "[\\S\\s]{1,200000}", "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons (max 200000 characters).", "required": true}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"], "required": true}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"], "required": true}}}, "multiReply": false, "tcdate": 1552335693340, "tmdate": 1552335693340, "readers": ["everyone"], "nonreaders": [], "writers": ["ICLR.cc/2019/Conference"], "invitees": ["ICLR.cc/2019/Conference/Paper299/Reviewers"], "noninvitees": [], "signatures": ["ICLR.cc/2019/Conference"]}}}, {"id": "HJeHr0F0K7", "original": null, "number": 1, "cdate": 1538330173495, "ddate": null, "tcdate": 1538330173495, "tmdate": 1538330173495, "tddate": null, "forum": "B1xnPsA5KX", "replyto": "B1xnPsA5KX", "invitation": "ICLR.cc/2019/Conference/-/Paper299/Public_Comment", "content": {"comment": "The paper proposes a probabilistic programming (PP) framework with modular building blocks for deep learning (DL) models. Although suggested as novel, this is not new in the PP community. Model modularity is a fundamental to essentially all PP systems, and modular inference has been presented in a number of works [1-4]. Moreover, several frameworks such as Edward [1] and Pyro [5] are built specifically for DL models.\n\nThe authors focus on variational inference tactics for PP, yet this approach to inference in PP is well-demonstrated in Edward and others. A lesser focus is on Gaussian process (GP) models, which is an important direction of research in PP. The presented analysis on real world problems is useful and interesting. Yet the GP parts of this paper are lacking:\n- Details of how a GP fits within the probabilistic programming framework is missing\n- Should be more discussion of results\n\nA couple important points regarding the submission:\n- Authors should cite recent works in PP. For example, [3, 4] propose PP languages designed for modular inference, and [4] presents a probabilistic DSL designed for GPs. See https://probprog.cc/ for most recent work in the field.\n- By naming the framework \"MXFusion\" in the paper the submission is no longer anonymized (see https://github.com/amzn/MXFusion#contributing)\n\n[1] Tran et al. Edward: A library for probabilistic modeling, inference, and criticism. 2016.\n[2] Mansinghka et al. Venture: a higher-order probabilistic\nprogramming platform with programmable inference. 2014.\n[3] Ge et al. Turing: a language for flexible probabilistic inference. 2018.\n[4] Lavin & Mansinghka. Probabilistic programming for data-efficient robotics. 2018.\n[5] Noah Goodman. Uber AI Labs open sources Pyro, a deep probabilistic programming language. 2017.", "title": "Somewhat important direction of research, but not entirely novel and lacking discussion"}, "signatures": ["(anonymous)"], "readers": ["everyone"], "nonreaders": ["ICLR.cc/2019/Conference/Paper299/Reviewers/Unsubmitted"], "writers": ["(anonymous)", "ICLR.cc/2019/Conference"], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Modular Deep Probabilistic Programming", "abstract": "Modularity is a key feature of deep learning libraries but has not been fully exploited for probabilistic programming. We propose to improve modularity of probabilistic programming language by offering not only plain probabilistic distributions but also sophisticated probabilistic model such as Bayesian non-parametric models as fundamental building blocks. We demonstrate this idea by presenting a modular probabilistic programming language MXFusion, which includes a new type of re-usable building blocks, called probabilistic modules. A probabilistic module consists of a set of random variables with associated probabilistic distributions and dedicated inference methods. Under the framework of variational inference, the pre-specified inference methods of individual probabilistic modules can be transparently used for inference of the whole probabilistic model. We demonstrate the power and convenience of probabilistic modules in MXFusion with various examples of Gaussian process models, which are evaluated with experiments on real data.", "keywords": [], "authorids": ["zhenwend@amazon.com", "erimeiss@amazon.com", "lawrennd@amazon.com"], "authors": ["Zhenwen Dai", "Eric Meissner", "Neil D. Lawrence"], "pdf": "/pdf/2060b15e3a209688624c854d9a0d2c04d4a368f0.pdf", "paperhash": "dai|modular_deep_probabilistic_programming", "_bibtex": "@misc{\ndai2019modular,\ntitle={Modular Deep Probabilistic Programming},\nauthor={Zhenwen Dai and Eric Meissner and Neil D. Lawrence},\nyear={2019},\nurl={https://openreview.net/forum?id=B1xnPsA5KX},\n}"}, "tags": [], "invitation": {"id": "ICLR.cc/2019/Conference/-/Paper299/Public_Comment", "rdate": null, "ddate": null, "expdate": null, "duedate": null, "tmdate": 1542311872433, "tddate": null, "super": null, "final": null, "reply": {"signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed."}, "nonreaders": {"values": []}, "forum": "B1xnPsA5KX", "readers": {"description": "Select all user groups that should be able to read this comment.", "value-dropdown-hierarchy": ["everyone", "ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"]}, "replyto": null, "content": {"comment": {"value-regex": "[\\S\\s]{1,5000}", "required": true, "order": 1, "description": "Your comment or reply (max 5000 characters)."}, "title": {"value-regex": ".{1,500}", "required": true, "order": 0, "description": "Brief summary of your comment."}}, "writers": {"description": "Users that may modify this record.", "values-copied": ["ICLR.cc/2019/Conference", "{signatures}"]}}, "signatures": ["ICLR.cc/2019/Conference"], "readers": ["everyone"], "nonreaders": [], "invitees": ["~"], "noninvitees": ["ICLR.cc/2019/Conference/Paper299/Authors", "ICLR.cc/2019/Conference/Paper299/Reviewers", "ICLR.cc/2019/Conference/Paper299/Area_Chairs", "ICLR.cc/2019/Conference/Program_Chairs"], "writers": ["ICLR.cc/2019/Conference"], "multiReply": true, "taskCompletionCount": null, "transform": null, "cdate": 1542311872433}}}], "count": 10}