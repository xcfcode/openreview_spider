{"notes": [{"tddate": null, "ddate": null, "cdate": null, "tmdate": 1486396349147, "tcdate": 1486396349147, "number": 1, "id": "rkS6oGU_l", "invitation": "ICLR.cc/2017/conference/-/paper89/acceptance", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/pcs"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/pcs"], "content": {"decision": "Reject", "title": "ICLR committee final decision", "comment": "This paper augments language models with attention to to capture long range dependencies through a sparse pointer network that is restricted to previously introduced identifiers, and demonstrates the proposed architecture over a new, released large-scale code suggestion corpus of 41M lines of Python code. The addition of long range attention over 20 identifiers improves perplexity compared to an LSTM with an attentional context of 50 words, but degrades accuracy (hit @1), while improving hit@5.\n The experimental validation however requires a more thorough analysis and more detailed ablation experiments and discussions, and more thorough comparison to related work. As is, many choices seem quite arbitrary and make it hard to determine if the model is really performing well (minibatch sizes, size of the memory for the LSTM, choice and number of identifiers for the sparse pointers, etc)."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1486396349674, "id": "ICLR.cc/2017/conference/-/paper89/acceptance", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/pcs"], "noninvitees": ["ICLR.cc/2017/pcs"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/pcs"}, "signatures": {"values-regex": "ICLR.cc/2017/pcs", "description": "Your displayed identity associated with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your decision.", "value": "ICLR committee final decision"}, "comment": {"required": true, "order": 2, "description": "Decision comments.", "value-regex": "[\\S\\s]{1,5000}"}, "decision": {"required": true, "order": 3, "value-radio": ["Accept (Oral)", "Accept (Poster)", "Reject", "Invite to Workshop Track"]}}}, "nonreaders": [], "cdate": 1486396349674}}}, {"tddate": null, "tmdate": 1483885171464, "tcdate": 1483885171464, "number": 9, "id": "SysuqayUe", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "B1iOZNEVe", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: attention mechanism hardcoded?", "comment": "Thank you for your comments. Note that the attention mechanism is not hardcoded, it is learned from data. What is hardcoded, however, is the heuristic to restrict the attention to context representations at positions of the previous n identifiers instead of all context representations of the previous n tokens. Which one of these identifiers is chosen and whether the plain neural language model or the pointer network is used for predicting the next token, is a soft decision that is learned (please also see our response to AnnoReviewer1). Also note that in principle there is no restriction on what information from the context is used as we are using a neural language model that can store information in its memory (as opposed to ngram models where the context is limited to the previous n-1 tokens). In theory this could be information from any previous timesteps (so it is as general as it can be), but in practice it is hard for the model to learn such long-range dependencies. That\u2019s why we use the pointer network to provide a way to refer back to identifiers that have been defined many tokens in the past. We agree that it would be great to see a comparison on py150, but please note that this corpus appeared very few days before the ICLR deadline, so we have to defer a comparison to future work. \n"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1483885066691, "tcdate": 1483885066691, "number": 8, "id": "BJQGcak8x", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "HJ7hhhfVl", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: Review", "comment": "Thank you for your review and feedback. We have now updated the paper to include the link to the Python corpus. Subsequent to your comment, we ran the baseline models with a batch size of 30 and noted that they achieved worse validation and test set perplexities. We have therefore chosen to continue reporting the better results of the baseline models with a batch size of 75 and have made this clear in the paper. "}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1483885006214, "tcdate": 1483885006214, "number": 7, "id": "B180t6JUg", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "SJ8ttDXNx", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: no title", "comment": "Thank you for taking the time to review our paper!"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "replyto": null, "ddate": null, "tmdate": 1483884966800, "tcdate": 1478209303040, "number": 89, "id": "r1kQkVFgl", "invitation": "ICLR.cc/2017/conference/-/submission", "forum": "r1kQkVFgl", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "content": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "writers": [], "nonreaders": [], "details": {"replyCount": 15, "writable": false, "overwriting": [], "revisions": true, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1475686800000, "tmdate": 1478287705855, "id": "ICLR.cc/2017/conference/-/submission", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/pcs"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": null, "replyto": null, "writers": {"values-regex": "~.*"}, "signatures": {"values-regex": "~.*", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"pdf": {"required": true, "order": 5, "description": "Either upload a PDF file or provide a direct link to your PDF on ArXiv (link must begin with http(s) and end with .pdf)", "value-regex": "upload|(http|https):\\/\\/.+\\.pdf"}, "title": {"required": true, "order": 1, "description": "Title of paper.", "value-regex": ".{1,250}"}, "abstract": {"required": true, "order": 4, "description": "Abstract of paper.", "value-regex": "[\\S\\s]{1,5000}"}, "authors": {"required": true, "order": 2, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of author names, as they appear in the paper."}, "conflicts": {"required": true, "order": 100, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of email domains of people who would have a conflict of interest in reviewing this paper, (e.g., cs.umass.edu;google.com, etc.)."}, "keywords": {"order": 6, "description": "Comma separated list of keywords.", "values-dropdown": ["Theory", "Computer vision", "Speech", "Natural language processing", "Deep learning", "Unsupervised Learning", "Supervised Learning", "Semi-Supervised Learning", "Reinforcement Learning", "Transfer Learning", "Multi-modal learning", "Applications", "Optimization", "Structured prediction", "Games"]}, "TL;DR": {"required": false, "order": 3, "description": "\"Too Long; Didn't Read\": a short sentence describing your paper", "value-regex": "[^\\n]{0,250}"}, "authorids": {"required": true, "order": 3, "values-regex": "[^;,\\n]+(,[^,\\n]+)*", "description": "Comma separated list of author email addresses, in the same order as above."}}}, "nonreaders": [], "noninvitees": [], "expdate": 1483462800000, "cdate": 1478287705855}}}, {"tddate": null, "tmdate": 1482076531175, "tcdate": 1482076531175, "number": 6, "id": "B1iOZNEVe", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "S1SnOnTQg", "signatures": ["(anonymous)"], "readers": ["everyone"], "writers": ["(anonymous)"], "content": {"title": "attention mechanism hardcoded?", "comment": "The claim that this approach is more flexible than the papers mentioned above does not really make sense. If anything, the attention mechanism used here is somewhat hardcoded. That is, the prediction of an identifier can only depend on other identifiers. \n\nThis is a more restricted requirement than prior work mentioned above which discovers the elements upon which a prediction should be conditioned, so it is more general. In terms of assumptions it only assumes a parser for the language, which all programming languages have.\n\nI would also be happy to see a comparison on the py150.php dataset in terms of precision. As is, the numbers in this paper do not look to be competitive."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1482025342434, "tcdate": 1482025342434, "number": 3, "id": "SJ8ttDXNx", "invitation": "ICLR.cc/2017/conference/-/paper89/official/review", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/conference/paper89/AnonReviewer3"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/conference/paper89/AnonReviewer3"], "content": {"title": "", "rating": "6: Marginally above acceptance threshold", "review": "This paper presents an improved neural language models designed for selected long-term dependency, i.e., to predict more accurately the next identifier for the dynamic programming language such as Python. The improvements are obtained by:\n\n1) replacing the fixed-widow attention with a pointer network, in which the memory only consists of context representation of the previous K identifies introduced for the entire history. \n2) a conventional neural LSTM-based language model is combined with such a sparse pointer network with a controller, which linearly combines the prediction of both components using a dynamic weights, decided by the input, hidden state, and the context representations at the time stamp.\n\nSuch a model avoids the the need of large window size of the attention to predict next identifier, which usually requires a long-term dependency in the programming language. This is partly validated by the python codebase (which is another contribution of this paper) experiments in the paper.\n\nWhile the paper still misses some critical information that I would like to see, including how the sparse pointer network performance chances with different size of K, and how computationally efficient it is for both training and inference time compared to LSTM w/ attention of various window size, and ablation experiments about how much (1) and (2) contribute respectively, it might be of interest to the ICLR community to see it accepted.\n\n", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1481932799000, "tmdate": 1482512702363, "id": "ICLR.cc/2017/conference/-/paper89/official/review", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/conference/paper89/reviewers"], "noninvitees": ["ICLR.cc/2017/conference/paper89/AnonReviewer1", "ICLR.cc/2017/conference/paper89/AnonReviewer2", "ICLR.cc/2017/conference/paper89/AnonReviewer3"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "signatures": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your review.", "value-regex": ".{0,500}"}, "review": {"order": 2, "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons.", "value-regex": "[\\S\\s]{1,20000}"}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"]}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"]}}}, "nonreaders": [], "expdate": 1489708799000, "cdate": 1482512702363}}}, {"tddate": null, "tmdate": 1481983583307, "tcdate": 1481981098675, "number": 2, "id": "HJ7hhhfVl", "invitation": "ICLR.cc/2017/conference/-/paper89/official/review", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/conference/paper89/AnonReviewer2"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/conference/paper89/AnonReviewer2"], "content": {"title": "Review", "rating": "6: Marginally above acceptance threshold", "review": "This paper uses a pointer network over a sparse window of identifiers to improve code suggestion for dynamically-typed languages. Code suggestion seems an area where attention and/or pointers truly show an advantage in capturing long term dependencies.\n\nThe sparse pointer method does seem to provide better results than attention for similar window sizes - specifically, comparing a window size of 20 for the attention and sparse pointer method shows the sparse pointer winning fairly definitively across the board. Given a major advantage of the pointer method is being able to use a large window size well thanks to the supervision the pointer provides, it was unfortunate (though understandable due to potential memory issues) not to see larger window sizes. Having a different batch size for the sparse pointer and attention models is unfortunate given it complicates an otherwise straight comparison between the two models.\n\nThe construction and filtering of the Python corpus sounds promising but as of now it is still inaccessible (listed in the paper as TODO). Given that code suggestion seems an interesting area for future long term dependency work, it may be promising as an avenue for future task exploration.\n\nOverall this paper and the dataset are likely an interesting contribution even though there are a few potential issues.", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1481932799000, "tmdate": 1482512702363, "id": "ICLR.cc/2017/conference/-/paper89/official/review", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/conference/paper89/reviewers"], "noninvitees": ["ICLR.cc/2017/conference/paper89/AnonReviewer1", "ICLR.cc/2017/conference/paper89/AnonReviewer2", "ICLR.cc/2017/conference/paper89/AnonReviewer3"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "signatures": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your review.", "value-regex": ".{0,500}"}, "review": {"order": 2, "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons.", "value-regex": "[\\S\\s]{1,20000}"}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"]}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"]}}}, "nonreaders": [], "expdate": 1489708799000, "cdate": 1482512702363}}}, {"tddate": null, "tmdate": 1481963613161, "tcdate": 1481963613161, "number": 5, "id": "BJHDOOM4g", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "BJgR3jbEg", "signatures": ["~Tim_Rocktaeschel1"], "readers": ["everyone"], "writers": ["~Tim_Rocktaeschel1"], "content": {"title": "The attention mechanism is learned", "comment": "Thank you for your review and comments! I just want to clarify that the attention mechanism is learned. What is fixed is the heuristic to only attend over the previous N outputs of an RNN at positions of identifiers instead of all kinds of previous tokens. As you pointed out, this heuristic of tracking previously used identifiers in scope has been used before. What we believe is novel is the following. For the previous N identifiers, the model is learning to first choose between a normal neural language or copying one of the N previously seen identifiers. When copying, the choice for one of these identifiers is modeled via a learnable attention mechanism. Also note that for this attention mechanism, the output representations at positions of identifiers is used, not the representation of the identifier in the input vocabulary. That is, the output representation at a position of an identifier can contain contextual information. We will update the paper to make this clearer."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1481911496335, "tcdate": 1481911496335, "number": 1, "id": "BJgR3jbEg", "invitation": "ICLR.cc/2017/conference/-/paper89/official/review", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/conference/paper89/AnonReviewer1"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/conference/paper89/AnonReviewer1"], "content": {"title": "An attention mechanism that isn't learned", "rating": "5: Marginally below acceptance threshold", "review": "This paper takes a standard auto-regressive model of source code and augments it with a fixed attention policy that tracks the use of certain token types, like identifiers. Additionally they release a Python open source dataset. As expected this augmentation, the fixed attention policy, improves the perplexity of the model. It seems important to dig a bit deeper into these results and show the contribution of different token types to the achieve perplexity. This is alluded to in the text, but a more thorough comparison would be welcome. The idea of an attention policy that takes advantage of expert knowledge is a nice contribution, but perhaps if limited novelty --- for example the Maddison and Tarlow 2014 paper, which the authors cite, has scoping rules that track previously used identifiers in scope. ", "confidence": "4: The reviewer is confident but not absolutely certain that the evaluation is correct"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1481932799000, "tmdate": 1482512702363, "id": "ICLR.cc/2017/conference/-/paper89/official/review", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/conference/paper89/reviewers"], "noninvitees": ["ICLR.cc/2017/conference/paper89/AnonReviewer1", "ICLR.cc/2017/conference/paper89/AnonReviewer2", "ICLR.cc/2017/conference/paper89/AnonReviewer3"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "signatures": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your review.", "value-regex": ".{0,500}"}, "review": {"order": 2, "description": "Please provide an evaluation of the quality, clarity, originality and significance of this work, including a list of its pros and cons.", "value-regex": "[\\S\\s]{1,20000}"}, "rating": {"order": 3, "value-dropdown": ["10: Top 5% of accepted papers, seminal paper", "9: Top 15% of accepted papers, strong accept", "8: Top 50% of accepted papers, clear accept", "7: Good paper, accept", "6: Marginally above acceptance threshold", "5: Marginally below acceptance threshold", "4: Ok but not good enough - rejection", "3: Clear rejection", "2: Strong rejection", "1: Trivial or wrong"]}, "confidence": {"order": 4, "value-radio": ["5: The reviewer is absolutely certain that the evaluation is correct and very familiar with the relevant literature", "4: The reviewer is confident but not absolutely certain that the evaluation is correct", "3: The reviewer is fairly confident that the evaluation is correct", "2: The reviewer is willing to defend the evaluation, but it is quite likely that the reviewer did not understand central parts of the paper", "1: The reviewer's evaluation is an educated guess"]}}}, "nonreaders": [], "expdate": 1489708799000, "cdate": 1482512702363}}}, {"tddate": null, "tmdate": 1481652396999, "tcdate": 1481652396991, "number": 4, "id": "S1SnOnTQg", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "ryV_9Rrmx", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: Prior work and suggestions", "comment": "Thank you for the comments and suggestions and for pointing us to indeed related recent work. We will certainly clarify equation 10 and add a reference to Allamanis et al (ICML\u201916). \n\nProbabilistic Model for Code with Decision Trees by Raychev et alia is closed-access and was published on the 3rd of November. Realistically, we had no way of knowing about it prior to the submission of our own work to ICLR on the 4th of November.  Like our work, their work also provides a Python corpus; this is all to the good: The community now has two Python corpora to investigate and evaluate systems on. Raychev et alia report higher accuracy of predicting identifiers, but do so trained against raw, as opposed to normalized, tokens, making direct comparison with our results difficult. They have also not yet published the tooling underlying their work, again impeding direct comparison.\n\nWith regards to Learning Programs from Noisy Data by Raychev et alia (POPL\u201916): they learn long-range dependencies by learning if-else programs, an encoding of decision trees, over ASTs and evaluate on the task of completing field or API names following a dot. In contrast, our unrestricted suggestions via the soft-attention mechanism over a history of previous tokens (or identifiers in the case of the Sparse Pointer Networks) is in principle a more flexible approach to code suggestion, as the model can learn from code usage which parts of the previous context are most relevant for suggesting the next token. More importantly, we make very few assumptions about the underlying programming language.\n"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1481136748342, "tcdate": 1481136748332, "number": 3, "id": "ryV_9Rrmx", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["(anonymous)"], "readers": ["everyone"], "writers": ["(anonymous)"], "content": {"title": "Prior Work & Suggestions", "comment": "Some of the claimed contributions the paper makes already exist in prior work. For instance:\n\n\u2192 There is already a Python data set available: http://www.srl.inf.ethz.ch/py150.php. It contains 150k files collected from GitHub and is used in the OOPSLA\u201916 paper below.\n\n\u2192 The paper misses critical related work which has higher precision of predicting Python code than reported here (the n-gram baseline is several years old):\n\nProbabilistic Model for Code with Decision Trees, OOPSLA\u201916\nhttp://dl.acm.org/citation.cfm?doid=2983990.2984041\n\nThat work achieves 51% accuracy for predicting identifiers (see Table 3), significantly higher than the 30% reported in this submission. In fact, the model of OOPSLA\u201916 (as well as those of POPL\u201916 and ICML\u201916 by Raychev et.al, Bielik et.al.), already learns long-distance relationships and need not be hardcoded as done via the M_t matrix in this paper.\n\n\u2192 There is also a missing citation to a paper that already uses attention networks for code (summarization in this case):\n\nA Convolutional Attention Network for Extreme Summarization of Source Code, ICML\u201916\nhttps://arxiv.org/abs/1602.03001\n\n\nFew suggestions/questions for improving the paper:\n\u2192 It would be useful if the authors could provide a more detailed breakdown of the model performance for different types of program tokens (e.g., constraints, methods, identifiers, control structures, etc.) as provided in prior work.\n\n\u2192 What is the motivation of learning over tokens instead of Abstract Syntax Trees? One would assume that the purely syntactic information provided by the tokenization is less suitable as it includes many irrelevant tokens (e.g., semicolons, function brackets, commas, indentation).\n\n\u2192 It would be interesting to include more evaluation of what the network is able to learn. In particular, one would expect that it would learn when to predict and identifier (in which case the identifier attention should be high) and when to predict some other program element. By inspecting the example program in the appendix (Fig. 4.) it however seems that only in 1 out of 4 cases when a reused identifier is expected the weight for the attention is high. However this is likely not representative of the full dataset. This might also be one of the reason why the results in top 1 prediction are in fact worse compared to LSTM with attention mechanism. \n\n\u2192 Minor: it would be useful to clarify what equation 10 does. In particular the size of vector s_t is never defined as well as the index j. From what I understand the size of s_t is the size of the identifier vector vocabulary and the equation 10, initializes values of those elements found in vector m_t to corresponding values from \\alpha and the remaining to -C."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1481097580793, "tcdate": 1481097580788, "number": 2, "id": "SkSu-rB7e", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "B1C8dofXe", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: Table 2", "comment": "Thank you for your question! We don\u2019t have a strong intuition as to why that is the case. However, top 1 accuracy of predicting the next Python token is only a proxy to the actual usefulness of the suggestion model, as in a single context there might be various appropriate tokens that could continue the code. Since the main task of a code suggestion system is to give these options to the programmer to chose from, we believe that top 5 accuracy might be a more sensible metric in terms of actual code suggestion usefulness."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1480927317944, "tcdate": 1480927317939, "number": 2, "id": "B1C8dofXe", "invitation": "ICLR.cc/2017/conference/-/paper89/pre-review/question", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/conference/paper89/AnonReviewer1"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/conference/paper89/AnonReviewer1"], "content": {"title": "Table 2", "question": "Thanks for the paper, it was mostly clear and well-motivated. I just wonder why it seems to be doing worse with the sparse pointer network on accuracy (Table 2)? Do you have some intuition for that?"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1480741199000, "tmdate": 1480959469978, "id": "ICLR.cc/2017/conference/-/paper89/pre-review/question", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/conference/paper89/reviewers"], "noninvitees": ["ICLR.cc/2017/conference/paper89/AnonReviewer2", "ICLR.cc/2017/conference/paper89/AnonReviewer1"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "signatures": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your question.", "value-regex": ".{1,500}"}, "question": {"order": 2, "description": "Your question", "value-regex": "[\\S\\s]{1,5000}"}}}, "nonreaders": [], "expdate": 1488517199000, "cdate": 1480959469978}}}, {"tddate": null, "tmdate": 1480708690275, "tcdate": 1480708690270, "number": 1, "id": "rJ9IMIk7l", "invitation": "ICLR.cc/2017/conference/-/paper89/public/comment", "forum": "r1kQkVFgl", "replyto": "BJZPZKizg", "signatures": ["~Avishkar_Bhoopchand1"], "readers": ["everyone"], "writers": ["~Avishkar_Bhoopchand1"], "content": {"title": "Re: Clarification re: batch sizes and history length ", "comment": "Thank you for your comment and question! The use of a smaller batch size for the Sparse Pointer Network is the result of GPU memory and time constraints. We agree that this may have a small effect on the perplexity and are currently working on updating our results using the same batch size for all models. We were also unable to test the Sparse Pointer Network with a history length of 50 due to computational constraints but wanted a stronger baseline than an attention model that only has access to the past 20 output representations. We found it encouraging that the Sparse Pointer Network is on par or better than the attention model with a history of 50."}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "duedate": null, "tddate": null, "ddate": null, "tmdate": 1485287733558, "id": "ICLR.cc/2017/conference/-/paper89/public/comment", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["~"], "reply": {"forum": "r1kQkVFgl", "writers": {"values-regex": "~.*|\\(anonymous\\)"}, "signatures": {"values-regex": "~.*|\\(anonymous\\)", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "value-dropdown": ["everyone", "ICLR.cc/2017/conference/organizers", "ICLR.cc/2017/conference/ACs_and_organizers", "ICLR.cc/2017/conference/reviewers_and_ACS_and_organizers"]}, "content": {"title": {"order": 1, "description": "Brief summary of your comment.", "value-regex": ".{1,500}"}, "comment": {"order": 2, "description": "Your comment or reply.", "value-regex": "[\\S\\s]{1,20000}"}}}, "nonreaders": [], "noninvitees": ["ICLR.cc/2017/conference/paper89/reviewers", "ICLR.cc/2017/conference/paper89/areachairs"], "cdate": 1485287733558}}}, {"tddate": null, "tmdate": 1480458584590, "tcdate": 1480458584585, "number": 1, "id": "BJZPZKizg", "invitation": "ICLR.cc/2017/conference/-/paper89/pre-review/question", "forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "signatures": ["ICLR.cc/2017/conference/paper89/AnonReviewer2"], "readers": ["everyone"], "writers": ["ICLR.cc/2017/conference/paper89/AnonReviewer2"], "content": {"title": "Clarification re: batch sizes and history length", "question": "I was initially confused regarding the filtered view / sparse pointer concept but Figure 1 made the definition clear. I feel this is most likely due to me considering \"identifier\" as a more general concept than the identifiers used in code modeling / IDEs.\n\nI am curious why the batch size jumps between the sparse pointer network (batch = 30) and the attention model (batch = 75) however. At least for word level language modeling, batch size can have an impact, usually with larger resulting in a worse perplexity.\n\nI'm also curious if you tried the sparse pointer network with a history 50 identifier representations, as you did with the attention network. Was there a reason you didn't? An equivalent history window would allow a more direct comparison for the sparse pointer network, especially given the attention model with a history of 50 is beating or near equal to the sparse pointer on some metrics.\n\nI look forward to seeing the Python corpus. It's likely to result in some very interesting continued work in this domain!"}, "nonreaders": [], "details": {"replyCount": 0, "writable": false, "overwriting": [], "revisions": false, "forumContent": {"title": "Learning Python Code Suggestion with a Sparse Pointer Network", "abstract": "To enhance developer productivity, all modern integrated development environments (IDEs) include code suggestion functionality that proposes likely next tokens at the cursor. While current IDEs work well for statically-typed languages, their reliance on type annotations means that they do not provide the same level of support for dynamic programming languages as for statically-typed languages. Moreover, suggestion engines in modern IDEs do not propose expressions or multi-statement idiomatic code. Recent work has shown that language models can improve code suggestion systems by learning from software repositories. This paper introduces a neural language model with a sparse pointer network aimed at capturing very long range dependencies. We release a large-scale code suggestion corpus of 41M lines of Python code crawled from GitHub. On this corpus, we found standard neural language models to perform well at suggesting local phenomena, but struggle to refer to identifiers that are introduced many tokens in the past. By augmenting a neural language model with a pointer network specialized in referring to predefined classes of identifiers, we obtain a much lower perplexity and a 5 percentage points increase in accuracy for code suggestion compared to an LSTM baseline. In fact, this increase in code suggestion accuracy is due to a 13 times more accurate prediction of identifiers. Furthermore, a qualitative analysis shows this model indeed captures interesting long-range dependencies, like referring to a class member defined over 60 tokens in the past.", "pdf": "/pdf/c87dce17b558f6c58df97ba9f664e375407d4633.pdf", "TL;DR": "We augment a neural language model with a pointer network for code suggestion that is specialized to referring to predefined groups of identifiers", "paperhash": "bhoopchand|learning_python_code_suggestion_with_a_sparse_pointer_network", "keywords": [], "conflicts": ["cs.ucl.ac.uk", "ucl.ac.uk", "google.com", "informatik.hu-berlin.de", "cs.umass.edu", "ed.ac.uk"], "authors": ["Avishkar Bhoopchand", "Tim Rockt\u00e4schel", "Earl Barr", "Sebastian Riedel"], "authorids": ["avishkar.bhoopchand.15@ucl.ac.uk", "t.rocktaschel@cs.ucl.ac.uk", "e.barr@cs.ucl.ac.uk", "s.riedel@cs.ucl.ac.uk"]}, "tags": [], "invitation": {"rdate": null, "tddate": null, "ddate": null, "duedate": 1480741199000, "tmdate": 1480959469978, "id": "ICLR.cc/2017/conference/-/paper89/pre-review/question", "writers": ["ICLR.cc/2017/conference"], "signatures": ["ICLR.cc/2017/conference"], "readers": ["everyone"], "invitees": ["ICLR.cc/2017/conference/paper89/reviewers"], "noninvitees": ["ICLR.cc/2017/conference/paper89/AnonReviewer2", "ICLR.cc/2017/conference/paper89/AnonReviewer1"], "reply": {"forum": "r1kQkVFgl", "replyto": "r1kQkVFgl", "writers": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+"}, "signatures": {"values-regex": "ICLR.cc/2017/conference/paper89/AnonReviewer[0-9]+", "description": "How your identity will be displayed with the above content."}, "readers": {"description": "The users who will be allowed to read the above content.", "values": ["everyone"]}, "content": {"title": {"order": 1, "description": "Brief summary of your question.", "value-regex": ".{1,500}"}, "question": {"order": 2, "description": "Your question", "value-regex": "[\\S\\s]{1,5000}"}}}, "nonreaders": [], "expdate": 1488517199000, "cdate": 1480959469978}}}], "count": 16}